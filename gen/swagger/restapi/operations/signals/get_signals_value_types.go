// Code generated by go-swagger; DO NOT EDIT.

package signals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSignalsValueTypesHandlerFunc turns a function with the right signature into a get signals value types handler
type GetSignalsValueTypesHandlerFunc func(GetSignalsValueTypesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSignalsValueTypesHandlerFunc) Handle(params GetSignalsValueTypesParams) middleware.Responder {
	return fn(params)
}

// GetSignalsValueTypesHandler interface for that can handle valid get signals value types params
type GetSignalsValueTypesHandler interface {
	Handle(GetSignalsValueTypesParams) middleware.Responder
}

// NewGetSignalsValueTypes creates a new http.Handler for the get signals value types operation
func NewGetSignalsValueTypes(ctx *middleware.Context, handler GetSignalsValueTypesHandler) *GetSignalsValueTypes {
	return &GetSignalsValueTypes{Context: ctx, Handler: handler}
}

/* GetSignalsValueTypes swagger:route GET /core/signals/value_types signals core getSignalsValueTypes

Get signals value types

*/
type GetSignalsValueTypes struct {
	Context *middleware.Context
	Handler GetSignalsValueTypesHandler
}

func (o *GetSignalsValueTypes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSignalsValueTypesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
