// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/yetialex/meta_test/gen/swagger/models"
)

// GetNodesTreeWithSignalsHandlerFunc turns a function with the right signature into a get nodes tree with signals handler
type GetNodesTreeWithSignalsHandlerFunc func(GetNodesTreeWithSignalsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNodesTreeWithSignalsHandlerFunc) Handle(params GetNodesTreeWithSignalsParams) middleware.Responder {
	return fn(params)
}

// GetNodesTreeWithSignalsHandler interface for that can handle valid get nodes tree with signals params
type GetNodesTreeWithSignalsHandler interface {
	Handle(GetNodesTreeWithSignalsParams) middleware.Responder
}

// NewGetNodesTreeWithSignals creates a new http.Handler for the get nodes tree with signals operation
func NewGetNodesTreeWithSignals(ctx *middleware.Context, handler GetNodesTreeWithSignalsHandler) *GetNodesTreeWithSignals {
	return &GetNodesTreeWithSignals{Context: ctx, Handler: handler}
}

/* GetNodesTreeWithSignals swagger:route GET /core/nodes/tree core nodes getNodesTreeWithSignals

Get nodes tree with signals

*/
type GetNodesTreeWithSignals struct {
	Context *middleware.Context
	Handler GetNodesTreeWithSignalsHandler
}

func (o *GetNodesTreeWithSignals) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetNodesTreeWithSignalsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetNodesTreeWithSignalsBadRequestBody get nodes tree with signals bad request body
//
// swagger:model GetNodesTreeWithSignalsBadRequestBody
type GetNodesTreeWithSignalsBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get nodes tree with signals bad request body
func (o *GetNodesTreeWithSignalsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get nodes tree with signals bad request body based on context it is used
func (o *GetNodesTreeWithSignalsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetNodesTreeWithSignalsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNodesTreeWithSignalsInternalServerErrorBody get nodes tree with signals internal server error body
//
// swagger:model GetNodesTreeWithSignalsInternalServerErrorBody
type GetNodesTreeWithSignalsInternalServerErrorBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get nodes tree with signals internal server error body
func (o *GetNodesTreeWithSignalsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get nodes tree with signals internal server error body based on context it is used
func (o *GetNodesTreeWithSignalsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetNodesTreeWithSignalsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNodesTreeWithSignalsNotFoundBody get nodes tree with signals not found body
//
// swagger:model GetNodesTreeWithSignalsNotFoundBody
type GetNodesTreeWithSignalsNotFoundBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get nodes tree with signals not found body
func (o *GetNodesTreeWithSignalsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get nodes tree with signals not found body based on context it is used
func (o *GetNodesTreeWithSignalsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetNodesTreeWithSignalsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNodesTreeWithSignalsOKBody get nodes tree with signals o k body
//
// swagger:model GetNodesTreeWithSignalsOKBody
type GetNodesTreeWithSignalsOKBody struct {

	// children
	// Required: true
	Children *models.NodeWithSubtreeObject `json:"children"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// directory
	// Required: true
	Directory *GetNodesTreeWithSignalsOKBodyDirectory `json:"directory"`

	// full name
	// Example: root/sub/leaf/node
	// Required: true
	FullName *string `json:"full_name"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_rule
	// Required: true
	Name *string `json:"name"`

	// prev id
	// Example: 0
	// Required: true
	PrevID *int64 `json:"prev_id"`

	// signals
	Signals *GetNodesTreeWithSignalsOKBodySignals `json:"signals,omitempty"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this get nodes tree with signals o k body
func (o *GetNodesTreeWithSignalsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDirectory(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrevID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignals(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) validateChildren(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"children", "body", o.Children); err != nil {
		return err
	}

	if o.Children != nil {
		if err := o.Children.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodesTreeWithSignalsOK" + "." + "children")
			}
			return err
		}
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getNodesTreeWithSignalsOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) validateDirectory(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"directory", "body", o.Directory); err != nil {
		return err
	}

	if o.Directory != nil {
		if err := o.Directory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodesTreeWithSignalsOK" + "." + "directory")
			}
			return err
		}
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"full_name", "body", o.FullName); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) validatePrevID(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"prev_id", "body", o.PrevID); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) validateSignals(formats strfmt.Registry) error {
	if swag.IsZero(o.Signals) { // not required
		return nil
	}

	if o.Signals != nil {
		if err := o.Signals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodesTreeWithSignalsOK" + "." + "signals")
			}
			return err
		}
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getNodesTreeWithSignalsOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get nodes tree with signals o k body based on the context it is used
func (o *GetNodesTreeWithSignalsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDirectory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	if o.Children != nil {
		if err := o.Children.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodesTreeWithSignalsOK" + "." + "children")
			}
			return err
		}
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) contextValidateDirectory(ctx context.Context, formats strfmt.Registry) error {

	if o.Directory != nil {
		if err := o.Directory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodesTreeWithSignalsOK" + "." + "directory")
			}
			return err
		}
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBody) contextValidateSignals(ctx context.Context, formats strfmt.Registry) error {

	if o.Signals != nil {
		if err := o.Signals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodesTreeWithSignalsOK" + "." + "signals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsOKBody) UnmarshalBinary(b []byte) error {
	var res GetNodesTreeWithSignalsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNodesTreeWithSignalsOKBodyDirectory get nodes tree with signals o k body directory
//
// swagger:model GetNodesTreeWithSignalsOKBodyDirectory
type GetNodesTreeWithSignalsOKBodyDirectory struct {

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_directory
	// Required: true
	Name *string `json:"name"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this get nodes tree with signals o k body directory
func (o *GetNodesTreeWithSignalsOKBodyDirectory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodesTreeWithSignalsOKBodyDirectory) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"directory"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getNodesTreeWithSignalsOK"+"."+"directory"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBodyDirectory) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("getNodesTreeWithSignalsOK"+"."+"directory"+"."+"description", "body", o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBodyDirectory) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"directory"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBodyDirectory) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"directory"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBodyDirectory) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"directory"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getNodesTreeWithSignalsOK"+"."+"directory"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get nodes tree with signals o k body directory based on context it is used
func (o *GetNodesTreeWithSignalsOKBodyDirectory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsOKBodyDirectory) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsOKBodyDirectory) UnmarshalBinary(b []byte) error {
	var res GetNodesTreeWithSignalsOKBodyDirectory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNodesTreeWithSignalsOKBodySignals get nodes tree with signals o k body signals
//
// swagger:model GetNodesTreeWithSignalsOKBodySignals
type GetNodesTreeWithSignalsOKBodySignals struct {

	// children
	// Required: true
	Children *models.SignalWithSubtreeObject `json:"children"`

	// class
	// Example: analog
	// Required: true
	// Enum: [analog discrete virtual]
	Class *string `json:"class"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// external id
	// Example: 1
	ExternalID *int64 `json:"external_id,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Measurement unit
	// Example: C
	Unit *string `json:"unit,omitempty"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// Value data type
	// Example: real
	// Required: true
	// Enum: [undefined integer real boolean]
	ValueType *string `json:"value_type"`
}

// Validate validates this get nodes tree with signals o k body signals
func (o *GetNodesTreeWithSignalsOKBodySignals) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodesTreeWithSignalsOKBodySignals) validateChildren(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"children", "body", o.Children); err != nil {
		return err
	}

	if o.Children != nil {
		if err := o.Children.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodesTreeWithSignalsOK" + "." + "signals" + "." + "children")
			}
			return err
		}
	}

	return nil
}

var getNodesTreeWithSignalsOKBodySignalsTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["analog","discrete","virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNodesTreeWithSignalsOKBodySignalsTypeClassPropEnum = append(getNodesTreeWithSignalsOKBodySignalsTypeClassPropEnum, v)
	}
}

const (

	// GetNodesTreeWithSignalsOKBodySignalsClassAnalog captures enum value "analog"
	GetNodesTreeWithSignalsOKBodySignalsClassAnalog string = "analog"

	// GetNodesTreeWithSignalsOKBodySignalsClassDiscrete captures enum value "discrete"
	GetNodesTreeWithSignalsOKBodySignalsClassDiscrete string = "discrete"

	// GetNodesTreeWithSignalsOKBodySignalsClassVirtual captures enum value "virtual"
	GetNodesTreeWithSignalsOKBodySignalsClassVirtual string = "virtual"
)

// prop value enum
func (o *GetNodesTreeWithSignalsOKBodySignals) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNodesTreeWithSignalsOKBodySignalsTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNodesTreeWithSignalsOKBodySignals) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"class", "body", o.Class); err != nil {
		return err
	}

	// value enum
	if err := o.validateClassEnum("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"class", "body", *o.Class); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBodySignals) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBodySignals) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetNodesTreeWithSignalsOKBodySignals) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var getNodesTreeWithSignalsOKBodySignalsTypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["undefined","integer","real","boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNodesTreeWithSignalsOKBodySignalsTypeValueTypePropEnum = append(getNodesTreeWithSignalsOKBodySignalsTypeValueTypePropEnum, v)
	}
}

const (

	// GetNodesTreeWithSignalsOKBodySignalsValueTypeUndefined captures enum value "undefined"
	GetNodesTreeWithSignalsOKBodySignalsValueTypeUndefined string = "undefined"

	// GetNodesTreeWithSignalsOKBodySignalsValueTypeInteger captures enum value "integer"
	GetNodesTreeWithSignalsOKBodySignalsValueTypeInteger string = "integer"

	// GetNodesTreeWithSignalsOKBodySignalsValueTypeReal captures enum value "real"
	GetNodesTreeWithSignalsOKBodySignalsValueTypeReal string = "real"

	// GetNodesTreeWithSignalsOKBodySignalsValueTypeBoolean captures enum value "boolean"
	GetNodesTreeWithSignalsOKBodySignalsValueTypeBoolean string = "boolean"
)

// prop value enum
func (o *GetNodesTreeWithSignalsOKBodySignals) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNodesTreeWithSignalsOKBodySignalsTypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNodesTreeWithSignalsOKBodySignals) validateValueType(formats strfmt.Registry) error {

	if err := validate.Required("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"value_type", "body", o.ValueType); err != nil {
		return err
	}

	// value enum
	if err := o.validateValueTypeEnum("getNodesTreeWithSignalsOK"+"."+"signals"+"."+"value_type", "body", *o.ValueType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get nodes tree with signals o k body signals based on the context it is used
func (o *GetNodesTreeWithSignalsOKBodySignals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNodesTreeWithSignalsOKBodySignals) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	if o.Children != nil {
		if err := o.Children.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNodesTreeWithSignalsOK" + "." + "signals" + "." + "children")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsOKBodySignals) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsOKBodySignals) UnmarshalBinary(b []byte) error {
	var res GetNodesTreeWithSignalsOKBodySignals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNodesTreeWithSignalsUnauthorizedBody get nodes tree with signals unauthorized body
//
// swagger:model GetNodesTreeWithSignalsUnauthorizedBody
type GetNodesTreeWithSignalsUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get nodes tree with signals unauthorized body
func (o *GetNodesTreeWithSignalsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get nodes tree with signals unauthorized body based on context it is used
func (o *GetNodesTreeWithSignalsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodesTreeWithSignalsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetNodesTreeWithSignalsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
