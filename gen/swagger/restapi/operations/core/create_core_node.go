// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCoreNodeHandlerFunc turns a function with the right signature into a create core node handler
type CreateCoreNodeHandlerFunc func(CreateCoreNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCoreNodeHandlerFunc) Handle(params CreateCoreNodeParams) middleware.Responder {
	return fn(params)
}

// CreateCoreNodeHandler interface for that can handle valid create core node params
type CreateCoreNodeHandler interface {
	Handle(CreateCoreNodeParams) middleware.Responder
}

// NewCreateCoreNode creates a new http.Handler for the create core node operation
func NewCreateCoreNode(ctx *middleware.Context, handler CreateCoreNodeHandler) *CreateCoreNode {
	return &CreateCoreNode{Context: ctx, Handler: handler}
}

/* CreateCoreNode swagger:route PUT /core/nodes core nodes createCoreNode

Create new core node

*/
type CreateCoreNode struct {
	Context *middleware.Context
	Handler CreateCoreNodeHandler
}

func (o *CreateCoreNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateCoreNodeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateCoreNodeBadRequestBody create core node bad request body
//
// swagger:model CreateCoreNodeBadRequestBody
type CreateCoreNodeBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this create core node bad request body
func (o *CreateCoreNodeBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create core node bad request body based on context it is used
func (o *CreateCoreNodeBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreNodeBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreNodeBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreNodeBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateCoreNodeBody create core node body
//
// swagger:model CreateCoreNodeBody
type CreateCoreNodeBody struct {

	// acl
	ACL interface{} `json:"acl,omitempty"`

	// comment
	// Example: Comment
	// Pattern: ^.{2,200}$
	Comment string `json:"comment,omitempty"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// directory id
	// Example: 1
	DirectoryID int64 `json:"directory_id,omitempty"`

	// meta
	// Example: meta
	// Pattern: ^.{2,200}$
	Meta string `json:"meta,omitempty"`

	// name
	// Example: node1
	// Required: true
	// Pattern: ^[A-Za-z0-9_.]{2,50}$
	Name *string `json:"name"`

	// prev id
	// Example: 1
	// Required: true
	PrevID *int64 `json:"prev_id"`

	// signal id
	// Example: 1
	SignalID int64 `json:"signal_id,omitempty"`
}

// Validate validates this create core node body
func (o *CreateCoreNodeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrevID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCoreNodeBody) validateComment(formats strfmt.Registry) error {
	if swag.IsZero(o.Comment) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"comment", "body", o.Comment, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreNodeBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"description", "body", o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreNodeBody) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"meta", "body", o.Meta, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreNodeBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `^[A-Za-z0-9_.]{2,50}$`); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreNodeBody) validatePrevID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"prev_id", "body", o.PrevID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create core node body based on context it is used
func (o *CreateCoreNodeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreNodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreNodeBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreNodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateCoreNodeConflictBody create core node conflict body
//
// swagger:model CreateCoreNodeConflictBody
type CreateCoreNodeConflictBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this create core node conflict body
func (o *CreateCoreNodeConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create core node conflict body based on context it is used
func (o *CreateCoreNodeConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreNodeConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreNodeConflictBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreNodeConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateCoreNodeOKBody create core node o k body
//
// swagger:model CreateCoreNodeOKBody
type CreateCoreNodeOKBody struct {

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// directory id
	// Example: 1
	DirectoryID int64 `json:"directory_id,omitempty"`

	// has children
	// Example: true
	HasChildren *bool `json:"has_children,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_node
	// Required: true
	Name *string `json:"name"`

	// prev id
	// Example: 0
	// Required: true
	PrevID *int64 `json:"prev_id"`

	// signal id
	// Example: 1
	SignalID int64 `json:"signal_id,omitempty"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this create core node o k body
func (o *CreateCoreNodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrevID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCoreNodeOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createCoreNodeOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createCoreNodeOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreNodeOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("createCoreNodeOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreNodeOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createCoreNodeOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreNodeOKBody) validatePrevID(formats strfmt.Registry) error {

	if err := validate.Required("createCoreNodeOK"+"."+"prev_id", "body", o.PrevID); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreNodeOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createCoreNodeOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createCoreNodeOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create core node o k body based on context it is used
func (o *CreateCoreNodeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreNodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreNodeOKBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreNodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateCoreNodeUnauthorizedBody create core node unauthorized body
//
// swagger:model CreateCoreNodeUnauthorizedBody
type CreateCoreNodeUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this create core node unauthorized body
func (o *CreateCoreNodeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create core node unauthorized body based on context it is used
func (o *CreateCoreNodeUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreNodeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreNodeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreNodeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
