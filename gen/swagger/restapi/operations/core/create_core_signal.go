// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCoreSignalHandlerFunc turns a function with the right signature into a create core signal handler
type CreateCoreSignalHandlerFunc func(CreateCoreSignalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCoreSignalHandlerFunc) Handle(params CreateCoreSignalParams) middleware.Responder {
	return fn(params)
}

// CreateCoreSignalHandler interface for that can handle valid create core signal params
type CreateCoreSignalHandler interface {
	Handle(CreateCoreSignalParams) middleware.Responder
}

// NewCreateCoreSignal creates a new http.Handler for the create core signal operation
func NewCreateCoreSignal(ctx *middleware.Context, handler CreateCoreSignalHandler) *CreateCoreSignal {
	return &CreateCoreSignal{Context: ctx, Handler: handler}
}

/* CreateCoreSignal swagger:route PUT /core/signals core signals createCoreSignal

Create new core signal

*/
type CreateCoreSignal struct {
	Context *middleware.Context
	Handler CreateCoreSignalHandler
}

func (o *CreateCoreSignal) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateCoreSignalParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateCoreSignalBadRequestBody create core signal bad request body
//
// swagger:model CreateCoreSignalBadRequestBody
type CreateCoreSignalBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this create core signal bad request body
func (o *CreateCoreSignalBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create core signal bad request body based on context it is used
func (o *CreateCoreSignalBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreSignalBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreSignalBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreSignalBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateCoreSignalBody create core signal body
//
// swagger:model CreateCoreSignalBody
type CreateCoreSignalBody struct {

	// class
	// Example: analog
	// Required: true
	// Enum: [analog discrete virtual]
	Class *string `json:"class"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// external id
	// Example: 1
	ExternalID int64 `json:"external_id,omitempty"`

	// name
	// Example: some_signal
	// Required: true
	// Pattern: ^[A-Za-z0-9_.]{2,50}$
	Name *string `json:"name"`

	// prev id
	// Example: 1
	PrevID *int64 `json:"prev_id,omitempty"`

	// Measurement unit
	// Example: C
	Unit *string `json:"unit,omitempty"`

	// Value data type
	// Example: real
	// Required: true
	// Enum: [undefined integer real boolean]
	ValueType *string `json:"value_type"`
}

// Validate validates this create core signal body
func (o *CreateCoreSignalBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createCoreSignalBodyTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["analog","discrete","virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCoreSignalBodyTypeClassPropEnum = append(createCoreSignalBodyTypeClassPropEnum, v)
	}
}

const (

	// CreateCoreSignalBodyClassAnalog captures enum value "analog"
	CreateCoreSignalBodyClassAnalog string = "analog"

	// CreateCoreSignalBodyClassDiscrete captures enum value "discrete"
	CreateCoreSignalBodyClassDiscrete string = "discrete"

	// CreateCoreSignalBodyClassVirtual captures enum value "virtual"
	CreateCoreSignalBodyClassVirtual string = "virtual"
)

// prop value enum
func (o *CreateCoreSignalBody) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCoreSignalBodyTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateCoreSignalBody) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"class", "body", o.Class); err != nil {
		return err
	}

	// value enum
	if err := o.validateClassEnum("body"+"."+"class", "body", *o.Class); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreSignalBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"description", "body", o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreSignalBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `^[A-Za-z0-9_.]{2,50}$`); err != nil {
		return err
	}

	return nil
}

var createCoreSignalBodyTypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["undefined","integer","real","boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCoreSignalBodyTypeValueTypePropEnum = append(createCoreSignalBodyTypeValueTypePropEnum, v)
	}
}

const (

	// CreateCoreSignalBodyValueTypeUndefined captures enum value "undefined"
	CreateCoreSignalBodyValueTypeUndefined string = "undefined"

	// CreateCoreSignalBodyValueTypeInteger captures enum value "integer"
	CreateCoreSignalBodyValueTypeInteger string = "integer"

	// CreateCoreSignalBodyValueTypeReal captures enum value "real"
	CreateCoreSignalBodyValueTypeReal string = "real"

	// CreateCoreSignalBodyValueTypeBoolean captures enum value "boolean"
	CreateCoreSignalBodyValueTypeBoolean string = "boolean"
)

// prop value enum
func (o *CreateCoreSignalBody) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCoreSignalBodyTypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateCoreSignalBody) validateValueType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"value_type", "body", o.ValueType); err != nil {
		return err
	}

	// value enum
	if err := o.validateValueTypeEnum("body"+"."+"value_type", "body", *o.ValueType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create core signal body based on context it is used
func (o *CreateCoreSignalBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreSignalBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreSignalBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreSignalBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateCoreSignalConflictBody create core signal conflict body
//
// swagger:model CreateCoreSignalConflictBody
type CreateCoreSignalConflictBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this create core signal conflict body
func (o *CreateCoreSignalConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create core signal conflict body based on context it is used
func (o *CreateCoreSignalConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreSignalConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreSignalConflictBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreSignalConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateCoreSignalOKBody create core signal o k body
//
// swagger:model CreateCoreSignalOKBody
type CreateCoreSignalOKBody struct {

	// class
	// Example: analog
	// Required: true
	// Enum: [analog discrete virtual]
	Class *string `json:"class"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// external id
	// Example: 1
	ExternalID int64 `json:"external_id,omitempty"`

	// has children
	// Example: true
	HasChildren *bool `json:"has_children,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_signal
	// Required: true
	Name *string `json:"name"`

	// Measurement unit
	// Example: C
	Unit *string `json:"unit,omitempty"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// Value data type
	// Example: real
	// Required: true
	// Enum: [undefined integer real boolean]
	ValueType *string `json:"value_type"`
}

// Validate validates this create core signal o k body
func (o *CreateCoreSignalOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createCoreSignalOKBodyTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["analog","discrete","virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCoreSignalOKBodyTypeClassPropEnum = append(createCoreSignalOKBodyTypeClassPropEnum, v)
	}
}

const (

	// CreateCoreSignalOKBodyClassAnalog captures enum value "analog"
	CreateCoreSignalOKBodyClassAnalog string = "analog"

	// CreateCoreSignalOKBodyClassDiscrete captures enum value "discrete"
	CreateCoreSignalOKBodyClassDiscrete string = "discrete"

	// CreateCoreSignalOKBodyClassVirtual captures enum value "virtual"
	CreateCoreSignalOKBodyClassVirtual string = "virtual"
)

// prop value enum
func (o *CreateCoreSignalOKBody) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCoreSignalOKBodyTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateCoreSignalOKBody) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("createCoreSignalOK"+"."+"class", "body", o.Class); err != nil {
		return err
	}

	// value enum
	if err := o.validateClassEnum("createCoreSignalOK"+"."+"class", "body", *o.Class); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreSignalOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createCoreSignalOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createCoreSignalOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreSignalOKBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("createCoreSignalOK"+"."+"description", "body", o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreSignalOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("createCoreSignalOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreSignalOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createCoreSignalOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateCoreSignalOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createCoreSignalOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createCoreSignalOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var createCoreSignalOKBodyTypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["undefined","integer","real","boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCoreSignalOKBodyTypeValueTypePropEnum = append(createCoreSignalOKBodyTypeValueTypePropEnum, v)
	}
}

const (

	// CreateCoreSignalOKBodyValueTypeUndefined captures enum value "undefined"
	CreateCoreSignalOKBodyValueTypeUndefined string = "undefined"

	// CreateCoreSignalOKBodyValueTypeInteger captures enum value "integer"
	CreateCoreSignalOKBodyValueTypeInteger string = "integer"

	// CreateCoreSignalOKBodyValueTypeReal captures enum value "real"
	CreateCoreSignalOKBodyValueTypeReal string = "real"

	// CreateCoreSignalOKBodyValueTypeBoolean captures enum value "boolean"
	CreateCoreSignalOKBodyValueTypeBoolean string = "boolean"
)

// prop value enum
func (o *CreateCoreSignalOKBody) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCoreSignalOKBodyTypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateCoreSignalOKBody) validateValueType(formats strfmt.Registry) error {

	if err := validate.Required("createCoreSignalOK"+"."+"value_type", "body", o.ValueType); err != nil {
		return err
	}

	// value enum
	if err := o.validateValueTypeEnum("createCoreSignalOK"+"."+"value_type", "body", *o.ValueType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create core signal o k body based on context it is used
func (o *CreateCoreSignalOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreSignalOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreSignalOKBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreSignalOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateCoreSignalUnauthorizedBody create core signal unauthorized body
//
// swagger:model CreateCoreSignalUnauthorizedBody
type CreateCoreSignalUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this create core signal unauthorized body
func (o *CreateCoreSignalUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create core signal unauthorized body based on context it is used
func (o *CreateCoreSignalUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCoreSignalUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCoreSignalUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CreateCoreSignalUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
