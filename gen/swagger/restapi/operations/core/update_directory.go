// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDirectoryHandlerFunc turns a function with the right signature into a update directory handler
type UpdateDirectoryHandlerFunc func(UpdateDirectoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateDirectoryHandlerFunc) Handle(params UpdateDirectoryParams) middleware.Responder {
	return fn(params)
}

// UpdateDirectoryHandler interface for that can handle valid update directory params
type UpdateDirectoryHandler interface {
	Handle(UpdateDirectoryParams) middleware.Responder
}

// NewUpdateDirectory creates a new http.Handler for the update directory operation
func NewUpdateDirectory(ctx *middleware.Context, handler UpdateDirectoryHandler) *UpdateDirectory {
	return &UpdateDirectory{Context: ctx, Handler: handler}
}

/* UpdateDirectory swagger:route PATCH /core/directories/{directory_id} core directories updateDirectory

Update directory

*/
type UpdateDirectory struct {
	Context *middleware.Context
	Handler UpdateDirectoryHandler
}

func (o *UpdateDirectory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateDirectoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateDirectoryBadRequestBody update directory bad request body
//
// swagger:model UpdateDirectoryBadRequestBody
type UpdateDirectoryBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this update directory bad request body
func (o *UpdateDirectoryBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update directory bad request body based on context it is used
func (o *UpdateDirectoryBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDirectoryBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDirectoryBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateDirectoryBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateDirectoryBody update directory body
//
// swagger:model UpdateDirectoryBody
type UpdateDirectoryBody struct {

	// acl
	ACL interface{} `json:"acl,omitempty"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description *string `json:"description,omitempty"`

	// name
	// Example: directory1
	// Pattern: ^[A-Za-z0-9_.]{2,50}$
	Name *string `json:"name,omitempty"`
}

// Validate validates this update directory body
func (o *UpdateDirectoryBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDirectoryBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"description", "body", *o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDirectoryBody) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `^[A-Za-z0-9_.]{2,50}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update directory body based on context it is used
func (o *UpdateDirectoryBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDirectoryBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDirectoryBody) UnmarshalBinary(b []byte) error {
	var res UpdateDirectoryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateDirectoryInternalServerErrorBody update directory internal server error body
//
// swagger:model UpdateDirectoryInternalServerErrorBody
type UpdateDirectoryInternalServerErrorBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this update directory internal server error body
func (o *UpdateDirectoryInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update directory internal server error body based on context it is used
func (o *UpdateDirectoryInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDirectoryInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDirectoryInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdateDirectoryInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateDirectoryNotFoundBody update directory not found body
//
// swagger:model UpdateDirectoryNotFoundBody
type UpdateDirectoryNotFoundBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this update directory not found body
func (o *UpdateDirectoryNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update directory not found body based on context it is used
func (o *UpdateDirectoryNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDirectoryNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDirectoryNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateDirectoryNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateDirectoryOKBody update directory o k body
//
// swagger:model UpdateDirectoryOKBody
type UpdateDirectoryOKBody struct {

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_directory
	// Required: true
	Name *string `json:"name"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this update directory o k body
func (o *UpdateDirectoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDirectoryOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updateDirectoryOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updateDirectoryOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDirectoryOKBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("updateDirectoryOK"+"."+"description", "body", o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDirectoryOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("updateDirectoryOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDirectoryOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("updateDirectoryOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDirectoryOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updateDirectoryOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updateDirectoryOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update directory o k body based on context it is used
func (o *UpdateDirectoryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDirectoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDirectoryOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateDirectoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateDirectoryUnauthorizedBody update directory unauthorized body
//
// swagger:model UpdateDirectoryUnauthorizedBody
type UpdateDirectoryUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this update directory unauthorized body
func (o *UpdateDirectoryUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update directory unauthorized body based on context it is used
func (o *UpdateDirectoryUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDirectoryUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDirectoryUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UpdateDirectoryUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
