// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yetialex/meta_test/gen/swagger/models"
)

// UpdateNodeOKCode is the HTTP code returned for type UpdateNodeOK
const UpdateNodeOKCode int = 200

/*UpdateNodeOK OK

swagger:response updateNodeOK
*/
type UpdateNodeOK struct {

	/*
	  In: Body
	*/
	Payload *models.NodeObject `json:"body,omitempty"`
}

// NewUpdateNodeOK creates UpdateNodeOK with default headers values
func NewUpdateNodeOK() *UpdateNodeOK {

	return &UpdateNodeOK{}
}

// WithPayload adds the payload to the update node o k response
func (o *UpdateNodeOK) WithPayload(payload *models.NodeObject) *UpdateNodeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update node o k response
func (o *UpdateNodeOK) SetPayload(payload *models.NodeObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNodeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNodeBadRequestCode is the HTTP code returned for type UpdateNodeBadRequest
const UpdateNodeBadRequestCode int = 400

/*UpdateNodeBadRequest Bad params supplied

swagger:response updateNodeBadRequest
*/
type UpdateNodeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewUpdateNodeBadRequest creates UpdateNodeBadRequest with default headers values
func NewUpdateNodeBadRequest() *UpdateNodeBadRequest {

	return &UpdateNodeBadRequest{}
}

// WithPayload adds the payload to the update node bad request response
func (o *UpdateNodeBadRequest) WithPayload(payload *models.ErrorResponse) *UpdateNodeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update node bad request response
func (o *UpdateNodeBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNodeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNodeUnauthorizedCode is the HTTP code returned for type UpdateNodeUnauthorized
const UpdateNodeUnauthorizedCode int = 401

/*UpdateNodeUnauthorized Unauthorized

swagger:response updateNodeUnauthorized
*/
type UpdateNodeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewUpdateNodeUnauthorized creates UpdateNodeUnauthorized with default headers values
func NewUpdateNodeUnauthorized() *UpdateNodeUnauthorized {

	return &UpdateNodeUnauthorized{}
}

// WithPayload adds the payload to the update node unauthorized response
func (o *UpdateNodeUnauthorized) WithPayload(payload *models.ErrorResponse) *UpdateNodeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update node unauthorized response
func (o *UpdateNodeUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNodeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNodeNotFoundCode is the HTTP code returned for type UpdateNodeNotFound
const UpdateNodeNotFoundCode int = 404

/*UpdateNodeNotFound Node not found

swagger:response updateNodeNotFound
*/
type UpdateNodeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewUpdateNodeNotFound creates UpdateNodeNotFound with default headers values
func NewUpdateNodeNotFound() *UpdateNodeNotFound {

	return &UpdateNodeNotFound{}
}

// WithPayload adds the payload to the update node not found response
func (o *UpdateNodeNotFound) WithPayload(payload *models.ErrorResponse) *UpdateNodeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update node not found response
func (o *UpdateNodeNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNodeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateNodeInternalServerErrorCode is the HTTP code returned for type UpdateNodeInternalServerError
const UpdateNodeInternalServerErrorCode int = 500

/*UpdateNodeInternalServerError Internal server error

swagger:response updateNodeInternalServerError
*/
type UpdateNodeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewUpdateNodeInternalServerError creates UpdateNodeInternalServerError with default headers values
func NewUpdateNodeInternalServerError() *UpdateNodeInternalServerError {

	return &UpdateNodeInternalServerError{}
}

// WithPayload adds the payload to the update node internal server error response
func (o *UpdateNodeInternalServerError) WithPayload(payload *models.ErrorResponse) *UpdateNodeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update node internal server error response
func (o *UpdateNodeInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateNodeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
