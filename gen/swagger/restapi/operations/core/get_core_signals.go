// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCoreSignalsHandlerFunc turns a function with the right signature into a get core signals handler
type GetCoreSignalsHandlerFunc func(GetCoreSignalsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCoreSignalsHandlerFunc) Handle(params GetCoreSignalsParams) middleware.Responder {
	return fn(params)
}

// GetCoreSignalsHandler interface for that can handle valid get core signals params
type GetCoreSignalsHandler interface {
	Handle(GetCoreSignalsParams) middleware.Responder
}

// NewGetCoreSignals creates a new http.Handler for the get core signals operation
func NewGetCoreSignals(ctx *middleware.Context, handler GetCoreSignalsHandler) *GetCoreSignals {
	return &GetCoreSignals{Context: ctx, Handler: handler}
}

/* GetCoreSignals swagger:route GET /core/signals core signals getCoreSignals

Get core signals

*/
type GetCoreSignals struct {
	Context *middleware.Context
	Handler GetCoreSignalsHandler
}

func (o *GetCoreSignals) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCoreSignalsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetCoreSignalsBadRequestBody get core signals bad request body
//
// swagger:model GetCoreSignalsBadRequestBody
type GetCoreSignalsBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get core signals bad request body
func (o *GetCoreSignalsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get core signals bad request body based on context it is used
func (o *GetCoreSignalsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreSignalsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreSignalsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetCoreSignalsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCoreSignalsNotFoundBody get core signals not found body
//
// swagger:model GetCoreSignalsNotFoundBody
type GetCoreSignalsNotFoundBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get core signals not found body
func (o *GetCoreSignalsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get core signals not found body based on context it is used
func (o *GetCoreSignalsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreSignalsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreSignalsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetCoreSignalsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCoreSignalsOKBody get core signals o k body
//
// swagger:model GetCoreSignalsOKBody
type GetCoreSignalsOKBody struct {

	// items
	Items []*GetCoreSignalsOKBodyItemsItems0 `json:"items"`
}

// Validate validates this get core signals o k body
func (o *GetCoreSignalsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCoreSignalsOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCoreSignalsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get core signals o k body based on the context it is used
func (o *GetCoreSignalsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCoreSignalsOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCoreSignalsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreSignalsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreSignalsOKBody) UnmarshalBinary(b []byte) error {
	var res GetCoreSignalsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCoreSignalsOKBodyItemsItems0 get core signals o k body items items0
//
// swagger:model GetCoreSignalsOKBodyItemsItems0
type GetCoreSignalsOKBodyItemsItems0 struct {

	// class
	// Example: analog
	// Required: true
	// Enum: [analog discrete virtual]
	Class *string `json:"class"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// external id
	// Example: 1
	ExternalID int64 `json:"external_id,omitempty"`

	// has children
	// Example: true
	HasChildren *bool `json:"has_children,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_signal
	// Required: true
	Name *string `json:"name"`

	// Measurement unit
	// Example: C
	Unit *string `json:"unit,omitempty"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// Value data type
	// Example: real
	// Required: true
	// Enum: [undefined integer real boolean]
	ValueType *string `json:"value_type"`
}

// Validate validates this get core signals o k body items items0
func (o *GetCoreSignalsOKBodyItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getCoreSignalsOKBodyItemsItems0TypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["analog","discrete","virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCoreSignalsOKBodyItemsItems0TypeClassPropEnum = append(getCoreSignalsOKBodyItemsItems0TypeClassPropEnum, v)
	}
}

const (

	// GetCoreSignalsOKBodyItemsItems0ClassAnalog captures enum value "analog"
	GetCoreSignalsOKBodyItemsItems0ClassAnalog string = "analog"

	// GetCoreSignalsOKBodyItemsItems0ClassDiscrete captures enum value "discrete"
	GetCoreSignalsOKBodyItemsItems0ClassDiscrete string = "discrete"

	// GetCoreSignalsOKBodyItemsItems0ClassVirtual captures enum value "virtual"
	GetCoreSignalsOKBodyItemsItems0ClassVirtual string = "virtual"
)

// prop value enum
func (o *GetCoreSignalsOKBodyItemsItems0) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getCoreSignalsOKBodyItemsItems0TypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetCoreSignalsOKBodyItemsItems0) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", o.Class); err != nil {
		return err
	}

	// value enum
	if err := o.validateClassEnum("class", "body", *o.Class); err != nil {
		return err
	}

	return nil
}

func (o *GetCoreSignalsOKBodyItemsItems0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCoreSignalsOKBodyItemsItems0) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *GetCoreSignalsOKBodyItemsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetCoreSignalsOKBodyItemsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetCoreSignalsOKBodyItemsItems0) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var getCoreSignalsOKBodyItemsItems0TypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["undefined","integer","real","boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCoreSignalsOKBodyItemsItems0TypeValueTypePropEnum = append(getCoreSignalsOKBodyItemsItems0TypeValueTypePropEnum, v)
	}
}

const (

	// GetCoreSignalsOKBodyItemsItems0ValueTypeUndefined captures enum value "undefined"
	GetCoreSignalsOKBodyItemsItems0ValueTypeUndefined string = "undefined"

	// GetCoreSignalsOKBodyItemsItems0ValueTypeInteger captures enum value "integer"
	GetCoreSignalsOKBodyItemsItems0ValueTypeInteger string = "integer"

	// GetCoreSignalsOKBodyItemsItems0ValueTypeReal captures enum value "real"
	GetCoreSignalsOKBodyItemsItems0ValueTypeReal string = "real"

	// GetCoreSignalsOKBodyItemsItems0ValueTypeBoolean captures enum value "boolean"
	GetCoreSignalsOKBodyItemsItems0ValueTypeBoolean string = "boolean"
)

// prop value enum
func (o *GetCoreSignalsOKBodyItemsItems0) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getCoreSignalsOKBodyItemsItems0TypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetCoreSignalsOKBodyItemsItems0) validateValueType(formats strfmt.Registry) error {

	if err := validate.Required("value_type", "body", o.ValueType); err != nil {
		return err
	}

	// value enum
	if err := o.validateValueTypeEnum("value_type", "body", *o.ValueType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get core signals o k body items items0 based on context it is used
func (o *GetCoreSignalsOKBodyItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreSignalsOKBodyItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreSignalsOKBodyItemsItems0) UnmarshalBinary(b []byte) error {
	var res GetCoreSignalsOKBodyItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCoreSignalsUnauthorizedBody get core signals unauthorized body
//
// swagger:model GetCoreSignalsUnauthorizedBody
type GetCoreSignalsUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get core signals unauthorized body
func (o *GetCoreSignalsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get core signals unauthorized body based on context it is used
func (o *GetCoreSignalsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreSignalsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreSignalsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetCoreSignalsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
