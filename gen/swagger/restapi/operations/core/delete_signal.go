// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteSignalHandlerFunc turns a function with the right signature into a delete signal handler
type DeleteSignalHandlerFunc func(DeleteSignalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteSignalHandlerFunc) Handle(params DeleteSignalParams) middleware.Responder {
	return fn(params)
}

// DeleteSignalHandler interface for that can handle valid delete signal params
type DeleteSignalHandler interface {
	Handle(DeleteSignalParams) middleware.Responder
}

// NewDeleteSignal creates a new http.Handler for the delete signal operation
func NewDeleteSignal(ctx *middleware.Context, handler DeleteSignalHandler) *DeleteSignal {
	return &DeleteSignal{Context: ctx, Handler: handler}
}

/* DeleteSignal swagger:route DELETE /core/signals/{signal_id} core signals deleteSignal

Delete signal

*/
type DeleteSignal struct {
	Context *middleware.Context
	Handler DeleteSignalHandler
}

func (o *DeleteSignal) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteSignalParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteSignalBadRequestBody delete signal bad request body
//
// swagger:model DeleteSignalBadRequestBody
type DeleteSignalBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this delete signal bad request body
func (o *DeleteSignalBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete signal bad request body based on context it is used
func (o *DeleteSignalBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSignalBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSignalBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteSignalBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteSignalInternalServerErrorBody delete signal internal server error body
//
// swagger:model DeleteSignalInternalServerErrorBody
type DeleteSignalInternalServerErrorBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this delete signal internal server error body
func (o *DeleteSignalInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete signal internal server error body based on context it is used
func (o *DeleteSignalInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSignalInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSignalInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteSignalInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteSignalNotFoundBody delete signal not found body
//
// swagger:model DeleteSignalNotFoundBody
type DeleteSignalNotFoundBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this delete signal not found body
func (o *DeleteSignalNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete signal not found body based on context it is used
func (o *DeleteSignalNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSignalNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSignalNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteSignalNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteSignalUnauthorizedBody delete signal unauthorized body
//
// swagger:model DeleteSignalUnauthorizedBody
type DeleteSignalUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this delete signal unauthorized body
func (o *DeleteSignalUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete signal unauthorized body based on context it is used
func (o *DeleteSignalUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSignalUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSignalUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res DeleteSignalUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
