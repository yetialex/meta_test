// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCoreDirectoriesHandlerFunc turns a function with the right signature into a get core directories handler
type GetCoreDirectoriesHandlerFunc func(GetCoreDirectoriesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCoreDirectoriesHandlerFunc) Handle(params GetCoreDirectoriesParams) middleware.Responder {
	return fn(params)
}

// GetCoreDirectoriesHandler interface for that can handle valid get core directories params
type GetCoreDirectoriesHandler interface {
	Handle(GetCoreDirectoriesParams) middleware.Responder
}

// NewGetCoreDirectories creates a new http.Handler for the get core directories operation
func NewGetCoreDirectories(ctx *middleware.Context, handler GetCoreDirectoriesHandler) *GetCoreDirectories {
	return &GetCoreDirectories{Context: ctx, Handler: handler}
}

/* GetCoreDirectories swagger:route GET /core/directories core directories getCoreDirectories

Get core directories

*/
type GetCoreDirectories struct {
	Context *middleware.Context
	Handler GetCoreDirectoriesHandler
}

func (o *GetCoreDirectories) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCoreDirectoriesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetCoreDirectoriesBadRequestBody get core directories bad request body
//
// swagger:model GetCoreDirectoriesBadRequestBody
type GetCoreDirectoriesBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get core directories bad request body
func (o *GetCoreDirectoriesBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get core directories bad request body based on context it is used
func (o *GetCoreDirectoriesBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreDirectoriesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreDirectoriesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetCoreDirectoriesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCoreDirectoriesNotFoundBody get core directories not found body
//
// swagger:model GetCoreDirectoriesNotFoundBody
type GetCoreDirectoriesNotFoundBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get core directories not found body
func (o *GetCoreDirectoriesNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get core directories not found body based on context it is used
func (o *GetCoreDirectoriesNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreDirectoriesNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreDirectoriesNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetCoreDirectoriesNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCoreDirectoriesOKBody get core directories o k body
//
// swagger:model GetCoreDirectoriesOKBody
type GetCoreDirectoriesOKBody struct {

	// items
	Items []*GetCoreDirectoriesOKBodyItemsItems0 `json:"items"`
}

// Validate validates this get core directories o k body
func (o *GetCoreDirectoriesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCoreDirectoriesOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCoreDirectoriesOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get core directories o k body based on the context it is used
func (o *GetCoreDirectoriesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCoreDirectoriesOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCoreDirectoriesOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreDirectoriesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreDirectoriesOKBody) UnmarshalBinary(b []byte) error {
	var res GetCoreDirectoriesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCoreDirectoriesOKBodyItemsItems0 get core directories o k body items items0
//
// swagger:model GetCoreDirectoriesOKBodyItemsItems0
type GetCoreDirectoriesOKBodyItemsItems0 struct {

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_directory
	// Required: true
	Name *string `json:"name"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this get core directories o k body items items0
func (o *GetCoreDirectoriesOKBodyItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCoreDirectoriesOKBodyItemsItems0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCoreDirectoriesOKBodyItemsItems0) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *GetCoreDirectoriesOKBodyItemsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetCoreDirectoriesOKBodyItemsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetCoreDirectoriesOKBodyItemsItems0) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get core directories o k body items items0 based on context it is used
func (o *GetCoreDirectoriesOKBodyItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreDirectoriesOKBodyItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreDirectoriesOKBodyItemsItems0) UnmarshalBinary(b []byte) error {
	var res GetCoreDirectoriesOKBodyItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCoreDirectoriesUnauthorizedBody get core directories unauthorized body
//
// swagger:model GetCoreDirectoriesUnauthorizedBody
type GetCoreDirectoriesUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get core directories unauthorized body
func (o *GetCoreDirectoriesUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get core directories unauthorized body based on context it is used
func (o *GetCoreDirectoriesUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCoreDirectoriesUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCoreDirectoriesUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetCoreDirectoriesUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
