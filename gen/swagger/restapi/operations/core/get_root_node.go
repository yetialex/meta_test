// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRootNodeHandlerFunc turns a function with the right signature into a get root node handler
type GetRootNodeHandlerFunc func(GetRootNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRootNodeHandlerFunc) Handle(params GetRootNodeParams) middleware.Responder {
	return fn(params)
}

// GetRootNodeHandler interface for that can handle valid get root node params
type GetRootNodeHandler interface {
	Handle(GetRootNodeParams) middleware.Responder
}

// NewGetRootNode creates a new http.Handler for the get root node operation
func NewGetRootNode(ctx *middleware.Context, handler GetRootNodeHandler) *GetRootNode {
	return &GetRootNode{Context: ctx, Handler: handler}
}

/* GetRootNode swagger:route GET /core/root_node core nodes getRootNode

Get root node

*/
type GetRootNode struct {
	Context *middleware.Context
	Handler GetRootNodeHandler
}

func (o *GetRootNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRootNodeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
