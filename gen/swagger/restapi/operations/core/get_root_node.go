// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetRootNodeHandlerFunc turns a function with the right signature into a get root node handler
type GetRootNodeHandlerFunc func(GetRootNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRootNodeHandlerFunc) Handle(params GetRootNodeParams) middleware.Responder {
	return fn(params)
}

// GetRootNodeHandler interface for that can handle valid get root node params
type GetRootNodeHandler interface {
	Handle(GetRootNodeParams) middleware.Responder
}

// NewGetRootNode creates a new http.Handler for the get root node operation
func NewGetRootNode(ctx *middleware.Context, handler GetRootNodeHandler) *GetRootNode {
	return &GetRootNode{Context: ctx, Handler: handler}
}

/* GetRootNode swagger:route GET /core/root_node core nodes getRootNode

Get root node

*/
type GetRootNode struct {
	Context *middleware.Context
	Handler GetRootNodeHandler
}

func (o *GetRootNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRootNodeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetRootNodeBadRequestBody get root node bad request body
//
// swagger:model GetRootNodeBadRequestBody
type GetRootNodeBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get root node bad request body
func (o *GetRootNodeBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get root node bad request body based on context it is used
func (o *GetRootNodeBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRootNodeBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRootNodeBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetRootNodeBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRootNodeInternalServerErrorBody get root node internal server error body
//
// swagger:model GetRootNodeInternalServerErrorBody
type GetRootNodeInternalServerErrorBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get root node internal server error body
func (o *GetRootNodeInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get root node internal server error body based on context it is used
func (o *GetRootNodeInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRootNodeInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRootNodeInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetRootNodeInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRootNodeOKBody get root node o k body
//
// swagger:model GetRootNodeOKBody
type GetRootNodeOKBody struct {

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// directory id
	// Example: 1
	DirectoryID int64 `json:"directory_id,omitempty"`

	// has children
	// Example: true
	HasChildren *bool `json:"has_children,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_node
	// Required: true
	Name *string `json:"name"`

	// prev id
	// Example: 0
	// Required: true
	PrevID *int64 `json:"prev_id"`

	// signal id
	// Example: 1
	SignalID int64 `json:"signal_id,omitempty"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this get root node o k body
func (o *GetRootNodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrevID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRootNodeOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getRootNodeOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getRootNodeOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetRootNodeOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getRootNodeOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetRootNodeOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getRootNodeOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetRootNodeOKBody) validatePrevID(formats strfmt.Registry) error {

	if err := validate.Required("getRootNodeOK"+"."+"prev_id", "body", o.PrevID); err != nil {
		return err
	}

	return nil
}

func (o *GetRootNodeOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getRootNodeOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getRootNodeOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get root node o k body based on context it is used
func (o *GetRootNodeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRootNodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRootNodeOKBody) UnmarshalBinary(b []byte) error {
	var res GetRootNodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRootNodeUnauthorizedBody get root node unauthorized body
//
// swagger:model GetRootNodeUnauthorizedBody
type GetRootNodeUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get root node unauthorized body
func (o *GetRootNodeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get root node unauthorized body based on context it is used
func (o *GetRootNodeUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRootNodeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRootNodeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetRootNodeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
