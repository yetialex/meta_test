// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSignalHandlerFunc turns a function with the right signature into a get signal handler
type GetSignalHandlerFunc func(GetSignalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSignalHandlerFunc) Handle(params GetSignalParams) middleware.Responder {
	return fn(params)
}

// GetSignalHandler interface for that can handle valid get signal params
type GetSignalHandler interface {
	Handle(GetSignalParams) middleware.Responder
}

// NewGetSignal creates a new http.Handler for the get signal operation
func NewGetSignal(ctx *middleware.Context, handler GetSignalHandler) *GetSignal {
	return &GetSignal{Context: ctx, Handler: handler}
}

/* GetSignal swagger:route GET /core/signals/{signal_id} core signals getSignal

Get signal

*/
type GetSignal struct {
	Context *middleware.Context
	Handler GetSignalHandler
}

func (o *GetSignal) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSignalParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetSignalBadRequestBody get signal bad request body
//
// swagger:model GetSignalBadRequestBody
type GetSignalBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get signal bad request body
func (o *GetSignalBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get signal bad request body based on context it is used
func (o *GetSignalBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSignalBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSignalBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSignalBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetSignalInternalServerErrorBody get signal internal server error body
//
// swagger:model GetSignalInternalServerErrorBody
type GetSignalInternalServerErrorBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get signal internal server error body
func (o *GetSignalInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get signal internal server error body based on context it is used
func (o *GetSignalInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSignalInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSignalInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetSignalInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetSignalNotFoundBody get signal not found body
//
// swagger:model GetSignalNotFoundBody
type GetSignalNotFoundBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get signal not found body
func (o *GetSignalNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get signal not found body based on context it is used
func (o *GetSignalNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSignalNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSignalNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSignalNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetSignalOKBody get signal o k body
//
// swagger:model GetSignalOKBody
type GetSignalOKBody struct {

	// class
	// Example: analog
	// Required: true
	// Enum: [analog discrete virtual]
	Class *string `json:"class"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// external id
	// Example: 1
	ExternalID int64 `json:"external_id,omitempty"`

	// has children
	// Example: true
	HasChildren *bool `json:"has_children,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_signal
	// Required: true
	Name *string `json:"name"`

	// Measurement unit
	// Example: C
	Unit *string `json:"unit,omitempty"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// Value data type
	// Example: real
	// Required: true
	// Enum: [undefined integer real boolean]
	ValueType *string `json:"value_type"`
}

// Validate validates this get signal o k body
func (o *GetSignalOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getSignalOKBodyTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["analog","discrete","virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getSignalOKBodyTypeClassPropEnum = append(getSignalOKBodyTypeClassPropEnum, v)
	}
}

const (

	// GetSignalOKBodyClassAnalog captures enum value "analog"
	GetSignalOKBodyClassAnalog string = "analog"

	// GetSignalOKBodyClassDiscrete captures enum value "discrete"
	GetSignalOKBodyClassDiscrete string = "discrete"

	// GetSignalOKBodyClassVirtual captures enum value "virtual"
	GetSignalOKBodyClassVirtual string = "virtual"
)

// prop value enum
func (o *GetSignalOKBody) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getSignalOKBodyTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetSignalOKBody) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("getSignalOK"+"."+"class", "body", o.Class); err != nil {
		return err
	}

	// value enum
	if err := o.validateClassEnum("getSignalOK"+"."+"class", "body", *o.Class); err != nil {
		return err
	}

	return nil
}

func (o *GetSignalOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getSignalOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getSignalOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetSignalOKBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("getSignalOK"+"."+"description", "body", o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *GetSignalOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getSignalOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetSignalOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getSignalOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetSignalOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getSignalOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getSignalOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var getSignalOKBodyTypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["undefined","integer","real","boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getSignalOKBodyTypeValueTypePropEnum = append(getSignalOKBodyTypeValueTypePropEnum, v)
	}
}

const (

	// GetSignalOKBodyValueTypeUndefined captures enum value "undefined"
	GetSignalOKBodyValueTypeUndefined string = "undefined"

	// GetSignalOKBodyValueTypeInteger captures enum value "integer"
	GetSignalOKBodyValueTypeInteger string = "integer"

	// GetSignalOKBodyValueTypeReal captures enum value "real"
	GetSignalOKBodyValueTypeReal string = "real"

	// GetSignalOKBodyValueTypeBoolean captures enum value "boolean"
	GetSignalOKBodyValueTypeBoolean string = "boolean"
)

// prop value enum
func (o *GetSignalOKBody) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getSignalOKBodyTypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetSignalOKBody) validateValueType(formats strfmt.Registry) error {

	if err := validate.Required("getSignalOK"+"."+"value_type", "body", o.ValueType); err != nil {
		return err
	}

	// value enum
	if err := o.validateValueTypeEnum("getSignalOK"+"."+"value_type", "body", *o.ValueType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get signal o k body based on context it is used
func (o *GetSignalOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSignalOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSignalOKBody) UnmarshalBinary(b []byte) error {
	var res GetSignalOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetSignalUnauthorizedBody get signal unauthorized body
//
// swagger:model GetSignalUnauthorizedBody
type GetSignalUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get signal unauthorized body
func (o *GetSignalUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get signal unauthorized body based on context it is used
func (o *GetSignalUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSignalUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSignalUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetSignalUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
