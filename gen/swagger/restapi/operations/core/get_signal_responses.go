// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yetialex/meta_test/gen/swagger/models"
)

// GetSignalOKCode is the HTTP code returned for type GetSignalOK
const GetSignalOKCode int = 200

/*GetSignalOK OK

swagger:response getSignalOK
*/
type GetSignalOK struct {

	/*
	  In: Body
	*/
	Payload *models.SignalObject `json:"body,omitempty"`
}

// NewGetSignalOK creates GetSignalOK with default headers values
func NewGetSignalOK() *GetSignalOK {

	return &GetSignalOK{}
}

// WithPayload adds the payload to the get signal o k response
func (o *GetSignalOK) WithPayload(payload *models.SignalObject) *GetSignalOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get signal o k response
func (o *GetSignalOK) SetPayload(payload *models.SignalObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSignalOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSignalBadRequestCode is the HTTP code returned for type GetSignalBadRequest
const GetSignalBadRequestCode int = 400

/*GetSignalBadRequest Bad params supplied

swagger:response getSignalBadRequest
*/
type GetSignalBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSignalBadRequest creates GetSignalBadRequest with default headers values
func NewGetSignalBadRequest() *GetSignalBadRequest {

	return &GetSignalBadRequest{}
}

// WithPayload adds the payload to the get signal bad request response
func (o *GetSignalBadRequest) WithPayload(payload *models.ErrorResponse) *GetSignalBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get signal bad request response
func (o *GetSignalBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSignalBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSignalUnauthorizedCode is the HTTP code returned for type GetSignalUnauthorized
const GetSignalUnauthorizedCode int = 401

/*GetSignalUnauthorized Unauthorized

swagger:response getSignalUnauthorized
*/
type GetSignalUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSignalUnauthorized creates GetSignalUnauthorized with default headers values
func NewGetSignalUnauthorized() *GetSignalUnauthorized {

	return &GetSignalUnauthorized{}
}

// WithPayload adds the payload to the get signal unauthorized response
func (o *GetSignalUnauthorized) WithPayload(payload *models.ErrorResponse) *GetSignalUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get signal unauthorized response
func (o *GetSignalUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSignalUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSignalNotFoundCode is the HTTP code returned for type GetSignalNotFound
const GetSignalNotFoundCode int = 404

/*GetSignalNotFound Signal not found

swagger:response getSignalNotFound
*/
type GetSignalNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSignalNotFound creates GetSignalNotFound with default headers values
func NewGetSignalNotFound() *GetSignalNotFound {

	return &GetSignalNotFound{}
}

// WithPayload adds the payload to the get signal not found response
func (o *GetSignalNotFound) WithPayload(payload *models.ErrorResponse) *GetSignalNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get signal not found response
func (o *GetSignalNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSignalNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSignalInternalServerErrorCode is the HTTP code returned for type GetSignalInternalServerError
const GetSignalInternalServerErrorCode int = 500

/*GetSignalInternalServerError Internal server error

swagger:response getSignalInternalServerError
*/
type GetSignalInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSignalInternalServerError creates GetSignalInternalServerError with default headers values
func NewGetSignalInternalServerError() *GetSignalInternalServerError {

	return &GetSignalInternalServerError{}
}

// WithPayload adds the payload to the get signal internal server error response
func (o *GetSignalInternalServerError) WithPayload(payload *models.ErrorResponse) *GetSignalInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get signal internal server error response
func (o *GetSignalInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSignalInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
