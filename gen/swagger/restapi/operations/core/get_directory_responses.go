// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yetialex/meta_test/gen/swagger/models"
)

// GetDirectoryOKCode is the HTTP code returned for type GetDirectoryOK
const GetDirectoryOKCode int = 200

/*GetDirectoryOK OK

swagger:response getDirectoryOK
*/
type GetDirectoryOK struct {

	/*
	  In: Body
	*/
	Payload *models.DirectoryObject `json:"body,omitempty"`
}

// NewGetDirectoryOK creates GetDirectoryOK with default headers values
func NewGetDirectoryOK() *GetDirectoryOK {

	return &GetDirectoryOK{}
}

// WithPayload adds the payload to the get directory o k response
func (o *GetDirectoryOK) WithPayload(payload *models.DirectoryObject) *GetDirectoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get directory o k response
func (o *GetDirectoryOK) SetPayload(payload *models.DirectoryObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDirectoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDirectoryBadRequestCode is the HTTP code returned for type GetDirectoryBadRequest
const GetDirectoryBadRequestCode int = 400

/*GetDirectoryBadRequest Bad params supplied

swagger:response getDirectoryBadRequest
*/
type GetDirectoryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetDirectoryBadRequest creates GetDirectoryBadRequest with default headers values
func NewGetDirectoryBadRequest() *GetDirectoryBadRequest {

	return &GetDirectoryBadRequest{}
}

// WithPayload adds the payload to the get directory bad request response
func (o *GetDirectoryBadRequest) WithPayload(payload *models.ErrorResponse) *GetDirectoryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get directory bad request response
func (o *GetDirectoryBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDirectoryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDirectoryUnauthorizedCode is the HTTP code returned for type GetDirectoryUnauthorized
const GetDirectoryUnauthorizedCode int = 401

/*GetDirectoryUnauthorized Unauthorized

swagger:response getDirectoryUnauthorized
*/
type GetDirectoryUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetDirectoryUnauthorized creates GetDirectoryUnauthorized with default headers values
func NewGetDirectoryUnauthorized() *GetDirectoryUnauthorized {

	return &GetDirectoryUnauthorized{}
}

// WithPayload adds the payload to the get directory unauthorized response
func (o *GetDirectoryUnauthorized) WithPayload(payload *models.ErrorResponse) *GetDirectoryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get directory unauthorized response
func (o *GetDirectoryUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDirectoryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDirectoryNotFoundCode is the HTTP code returned for type GetDirectoryNotFound
const GetDirectoryNotFoundCode int = 404

/*GetDirectoryNotFound Directory not found

swagger:response getDirectoryNotFound
*/
type GetDirectoryNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetDirectoryNotFound creates GetDirectoryNotFound with default headers values
func NewGetDirectoryNotFound() *GetDirectoryNotFound {

	return &GetDirectoryNotFound{}
}

// WithPayload adds the payload to the get directory not found response
func (o *GetDirectoryNotFound) WithPayload(payload *models.ErrorResponse) *GetDirectoryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get directory not found response
func (o *GetDirectoryNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDirectoryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDirectoryInternalServerErrorCode is the HTTP code returned for type GetDirectoryInternalServerError
const GetDirectoryInternalServerErrorCode int = 500

/*GetDirectoryInternalServerError Internal server error

swagger:response getDirectoryInternalServerError
*/
type GetDirectoryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetDirectoryInternalServerError creates GetDirectoryInternalServerError with default headers values
func NewGetDirectoryInternalServerError() *GetDirectoryInternalServerError {

	return &GetDirectoryInternalServerError{}
}

// WithPayload adds the payload to the get directory internal server error response
func (o *GetDirectoryInternalServerError) WithPayload(payload *models.ErrorResponse) *GetDirectoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get directory internal server error response
func (o *GetDirectoryInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDirectoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
