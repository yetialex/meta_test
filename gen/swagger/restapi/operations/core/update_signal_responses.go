// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// UpdateSignalOKCode is the HTTP code returned for type UpdateSignalOK
const UpdateSignalOKCode int = 200

/*UpdateSignalOK OK

swagger:response updateSignalOK
*/
type UpdateSignalOK struct {

	/*
	  In: Body
	*/
	Payload *UpdateSignalOKBody `json:"body,omitempty"`
}

// NewUpdateSignalOK creates UpdateSignalOK with default headers values
func NewUpdateSignalOK() *UpdateSignalOK {

	return &UpdateSignalOK{}
}

// WithPayload adds the payload to the update signal o k response
func (o *UpdateSignalOK) WithPayload(payload *UpdateSignalOKBody) *UpdateSignalOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update signal o k response
func (o *UpdateSignalOK) SetPayload(payload *UpdateSignalOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignalOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSignalBadRequestCode is the HTTP code returned for type UpdateSignalBadRequest
const UpdateSignalBadRequestCode int = 400

/*UpdateSignalBadRequest Bad params supplied

swagger:response updateSignalBadRequest
*/
type UpdateSignalBadRequest struct {

	/*
	  In: Body
	*/
	Payload *UpdateSignalBadRequestBody `json:"body,omitempty"`
}

// NewUpdateSignalBadRequest creates UpdateSignalBadRequest with default headers values
func NewUpdateSignalBadRequest() *UpdateSignalBadRequest {

	return &UpdateSignalBadRequest{}
}

// WithPayload adds the payload to the update signal bad request response
func (o *UpdateSignalBadRequest) WithPayload(payload *UpdateSignalBadRequestBody) *UpdateSignalBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update signal bad request response
func (o *UpdateSignalBadRequest) SetPayload(payload *UpdateSignalBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignalBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSignalUnauthorizedCode is the HTTP code returned for type UpdateSignalUnauthorized
const UpdateSignalUnauthorizedCode int = 401

/*UpdateSignalUnauthorized Unauthorized

swagger:response updateSignalUnauthorized
*/
type UpdateSignalUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *UpdateSignalUnauthorizedBody `json:"body,omitempty"`
}

// NewUpdateSignalUnauthorized creates UpdateSignalUnauthorized with default headers values
func NewUpdateSignalUnauthorized() *UpdateSignalUnauthorized {

	return &UpdateSignalUnauthorized{}
}

// WithPayload adds the payload to the update signal unauthorized response
func (o *UpdateSignalUnauthorized) WithPayload(payload *UpdateSignalUnauthorizedBody) *UpdateSignalUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update signal unauthorized response
func (o *UpdateSignalUnauthorized) SetPayload(payload *UpdateSignalUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignalUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSignalNotFoundCode is the HTTP code returned for type UpdateSignalNotFound
const UpdateSignalNotFoundCode int = 404

/*UpdateSignalNotFound Signal not found

swagger:response updateSignalNotFound
*/
type UpdateSignalNotFound struct {

	/*
	  In: Body
	*/
	Payload *UpdateSignalNotFoundBody `json:"body,omitempty"`
}

// NewUpdateSignalNotFound creates UpdateSignalNotFound with default headers values
func NewUpdateSignalNotFound() *UpdateSignalNotFound {

	return &UpdateSignalNotFound{}
}

// WithPayload adds the payload to the update signal not found response
func (o *UpdateSignalNotFound) WithPayload(payload *UpdateSignalNotFoundBody) *UpdateSignalNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update signal not found response
func (o *UpdateSignalNotFound) SetPayload(payload *UpdateSignalNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignalNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSignalInternalServerErrorCode is the HTTP code returned for type UpdateSignalInternalServerError
const UpdateSignalInternalServerErrorCode int = 500

/*UpdateSignalInternalServerError Internal server error

swagger:response updateSignalInternalServerError
*/
type UpdateSignalInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *UpdateSignalInternalServerErrorBody `json:"body,omitempty"`
}

// NewUpdateSignalInternalServerError creates UpdateSignalInternalServerError with default headers values
func NewUpdateSignalInternalServerError() *UpdateSignalInternalServerError {

	return &UpdateSignalInternalServerError{}
}

// WithPayload adds the payload to the update signal internal server error response
func (o *UpdateSignalInternalServerError) WithPayload(payload *UpdateSignalInternalServerErrorBody) *UpdateSignalInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update signal internal server error response
func (o *UpdateSignalInternalServerError) SetPayload(payload *UpdateSignalInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSignalInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
