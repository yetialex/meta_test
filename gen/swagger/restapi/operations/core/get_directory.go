// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDirectoryHandlerFunc turns a function with the right signature into a get directory handler
type GetDirectoryHandlerFunc func(GetDirectoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDirectoryHandlerFunc) Handle(params GetDirectoryParams) middleware.Responder {
	return fn(params)
}

// GetDirectoryHandler interface for that can handle valid get directory params
type GetDirectoryHandler interface {
	Handle(GetDirectoryParams) middleware.Responder
}

// NewGetDirectory creates a new http.Handler for the get directory operation
func NewGetDirectory(ctx *middleware.Context, handler GetDirectoryHandler) *GetDirectory {
	return &GetDirectory{Context: ctx, Handler: handler}
}

/* GetDirectory swagger:route GET /core/directories/{directory_id} core directories getDirectory

Get directory

*/
type GetDirectory struct {
	Context *middleware.Context
	Handler GetDirectoryHandler
}

func (o *GetDirectory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDirectoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetDirectoryBadRequestBody get directory bad request body
//
// swagger:model GetDirectoryBadRequestBody
type GetDirectoryBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get directory bad request body
func (o *GetDirectoryBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get directory bad request body based on context it is used
func (o *GetDirectoryBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDirectoryBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDirectoryBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetDirectoryBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetDirectoryInternalServerErrorBody get directory internal server error body
//
// swagger:model GetDirectoryInternalServerErrorBody
type GetDirectoryInternalServerErrorBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get directory internal server error body
func (o *GetDirectoryInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get directory internal server error body based on context it is used
func (o *GetDirectoryInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDirectoryInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDirectoryInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetDirectoryInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetDirectoryNotFoundBody get directory not found body
//
// swagger:model GetDirectoryNotFoundBody
type GetDirectoryNotFoundBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get directory not found body
func (o *GetDirectoryNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get directory not found body based on context it is used
func (o *GetDirectoryNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDirectoryNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDirectoryNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetDirectoryNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetDirectoryOKBody get directory o k body
//
// swagger:model GetDirectoryOKBody
type GetDirectoryOKBody struct {

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_directory
	// Required: true
	Name *string `json:"name"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this get directory o k body
func (o *GetDirectoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDirectoryOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getDirectoryOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getDirectoryOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetDirectoryOKBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.Pattern("getDirectoryOK"+"."+"description", "body", o.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (o *GetDirectoryOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getDirectoryOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetDirectoryOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getDirectoryOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetDirectoryOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("getDirectoryOK"+"."+"updated_at", "body", o.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("getDirectoryOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get directory o k body based on context it is used
func (o *GetDirectoryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDirectoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDirectoryOKBody) UnmarshalBinary(b []byte) error {
	var res GetDirectoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetDirectoryUnauthorizedBody get directory unauthorized body
//
// swagger:model GetDirectoryUnauthorizedBody
type GetDirectoryUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this get directory unauthorized body
func (o *GetDirectoryUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get directory unauthorized body based on context it is used
func (o *GetDirectoryUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDirectoryUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDirectoryUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetDirectoryUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
