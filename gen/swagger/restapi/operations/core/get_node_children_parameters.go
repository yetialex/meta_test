// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetNodeChildrenParams creates a new GetNodeChildrenParams object
// with the default values initialized.
func NewGetNodeChildrenParams() GetNodeChildrenParams {

	var (
		// initialize parameters with default values

		limitDefault = int64(100)

		offsetDefault  = int64(0)
		orderByDefault = string("asc(id)")
	)

	return GetNodeChildrenParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,

		OrderBy: &orderByDefault,
	}
}

// GetNodeChildrenParams contains all the bound params for the get node children operation
// typically these are obtained from a http.Request
//
// swagger:parameters getNodeChildren
type GetNodeChildrenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Maximum: 1000
	  Minimum: 1
	  In: query
	  Default: 100
	*/
	Limit *int64
	/*Filter by name
	  In: query
	*/
	Name *string
	/*Node ID
	  Required: true
	  In: path
	*/
	NodeID int64
	/*
	  In: query
	  Default: 0
	*/
	Offset *int64
	/*Must contain string like asc(field) or desc(field)
	  In: query
	  Default: "asc(id)"
	*/
	OrderBy *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetNodeChildrenParams() beforehand.
func (o *GetNodeChildrenParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	rNodeID, rhkNodeID, _ := route.Params.GetOK("node_id")
	if err := o.bindNodeID(rNodeID, rhkNodeID, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderBy, qhkOrderBy, _ := qs.GetOK("order_by")
	if err := o.bindOrderBy(qOrderBy, qhkOrderBy, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetNodeChildrenParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetNodeChildrenParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetNodeChildrenParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", *o.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "query", *o.Limit, 1000, false); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *GetNodeChildrenParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	return nil
}

// bindNodeID binds and validates parameter NodeID from path.
func (o *GetNodeChildrenParams) bindNodeID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("node_id", "path", "int64", raw)
	}
	o.NodeID = value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetNodeChildrenParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetNodeChildrenParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindOrderBy binds and validates parameter OrderBy from query.
func (o *GetNodeChildrenParams) bindOrderBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetNodeChildrenParams()
		return nil
	}
	o.OrderBy = &raw

	if err := o.validateOrderBy(formats); err != nil {
		return err
	}

	return nil
}

// validateOrderBy carries on validations for parameter OrderBy
func (o *GetNodeChildrenParams) validateOrderBy(formats strfmt.Registry) error {

	if err := validate.EnumCase("order_by", "query", *o.OrderBy, []interface{}{"asc(id)", "desc(id)", "asc(created_at)", "desc(created_at)", "asc(updated_at)", "desc(updated_at)"}, true); err != nil {
		return err
	}

	return nil
}
