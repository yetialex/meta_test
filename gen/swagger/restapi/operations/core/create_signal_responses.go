// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yetialex/meta_test/gen/swagger/models"
)

// CreateSignalOKCode is the HTTP code returned for type CreateSignalOK
const CreateSignalOKCode int = 200

/*CreateSignalOK OK

swagger:response createSignalOK
*/
type CreateSignalOK struct {

	/*
	  In: Body
	*/
	Payload *models.SignalObject `json:"body,omitempty"`
}

// NewCreateSignalOK creates CreateSignalOK with default headers values
func NewCreateSignalOK() *CreateSignalOK {

	return &CreateSignalOK{}
}

// WithPayload adds the payload to the create signal o k response
func (o *CreateSignalOK) WithPayload(payload *models.SignalObject) *CreateSignalOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create signal o k response
func (o *CreateSignalOK) SetPayload(payload *models.SignalObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSignalOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateSignalBadRequestCode is the HTTP code returned for type CreateSignalBadRequest
const CreateSignalBadRequestCode int = 400

/*CreateSignalBadRequest Bad params supplied

swagger:response createSignalBadRequest
*/
type CreateSignalBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateSignalBadRequest creates CreateSignalBadRequest with default headers values
func NewCreateSignalBadRequest() *CreateSignalBadRequest {

	return &CreateSignalBadRequest{}
}

// WithPayload adds the payload to the create signal bad request response
func (o *CreateSignalBadRequest) WithPayload(payload *models.ErrorResponse) *CreateSignalBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create signal bad request response
func (o *CreateSignalBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSignalBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateSignalUnauthorizedCode is the HTTP code returned for type CreateSignalUnauthorized
const CreateSignalUnauthorizedCode int = 401

/*CreateSignalUnauthorized Unauthorized

swagger:response createSignalUnauthorized
*/
type CreateSignalUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateSignalUnauthorized creates CreateSignalUnauthorized with default headers values
func NewCreateSignalUnauthorized() *CreateSignalUnauthorized {

	return &CreateSignalUnauthorized{}
}

// WithPayload adds the payload to the create signal unauthorized response
func (o *CreateSignalUnauthorized) WithPayload(payload *models.ErrorResponse) *CreateSignalUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create signal unauthorized response
func (o *CreateSignalUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSignalUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateSignalConflictCode is the HTTP code returned for type CreateSignalConflict
const CreateSignalConflictCode int = 409

/*CreateSignalConflict Conflict, signal already registered

swagger:response createSignalConflict
*/
type CreateSignalConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateSignalConflict creates CreateSignalConflict with default headers values
func NewCreateSignalConflict() *CreateSignalConflict {

	return &CreateSignalConflict{}
}

// WithPayload adds the payload to the create signal conflict response
func (o *CreateSignalConflict) WithPayload(payload *models.ErrorResponse) *CreateSignalConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create signal conflict response
func (o *CreateSignalConflict) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSignalConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
