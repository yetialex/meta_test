// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yetialex/meta_test/gen/swagger/models"
)

// GetSignalsOKCode is the HTTP code returned for type GetSignalsOK
const GetSignalsOKCode int = 200

/*GetSignalsOK OK

swagger:response getSignalsOK
*/
type GetSignalsOK struct {

	/*
	  In: Body
	*/
	Payload *GetSignalsOKBody `json:"body,omitempty"`
}

// NewGetSignalsOK creates GetSignalsOK with default headers values
func NewGetSignalsOK() *GetSignalsOK {

	return &GetSignalsOK{}
}

// WithPayload adds the payload to the get signals o k response
func (o *GetSignalsOK) WithPayload(payload *GetSignalsOKBody) *GetSignalsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get signals o k response
func (o *GetSignalsOK) SetPayload(payload *GetSignalsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSignalsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSignalsBadRequestCode is the HTTP code returned for type GetSignalsBadRequest
const GetSignalsBadRequestCode int = 400

/*GetSignalsBadRequest Bad params supplied

swagger:response getSignalsBadRequest
*/
type GetSignalsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSignalsBadRequest creates GetSignalsBadRequest with default headers values
func NewGetSignalsBadRequest() *GetSignalsBadRequest {

	return &GetSignalsBadRequest{}
}

// WithPayload adds the payload to the get signals bad request response
func (o *GetSignalsBadRequest) WithPayload(payload *models.ErrorResponse) *GetSignalsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get signals bad request response
func (o *GetSignalsBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSignalsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSignalsUnauthorizedCode is the HTTP code returned for type GetSignalsUnauthorized
const GetSignalsUnauthorizedCode int = 401

/*GetSignalsUnauthorized Unauthorized

swagger:response getSignalsUnauthorized
*/
type GetSignalsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSignalsUnauthorized creates GetSignalsUnauthorized with default headers values
func NewGetSignalsUnauthorized() *GetSignalsUnauthorized {

	return &GetSignalsUnauthorized{}
}

// WithPayload adds the payload to the get signals unauthorized response
func (o *GetSignalsUnauthorized) WithPayload(payload *models.ErrorResponse) *GetSignalsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get signals unauthorized response
func (o *GetSignalsUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSignalsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSignalsNotFoundCode is the HTTP code returned for type GetSignalsNotFound
const GetSignalsNotFoundCode int = 404

/*GetSignalsNotFound Core signals not found

swagger:response getSignalsNotFound
*/
type GetSignalsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSignalsNotFound creates GetSignalsNotFound with default headers values
func NewGetSignalsNotFound() *GetSignalsNotFound {

	return &GetSignalsNotFound{}
}

// WithPayload adds the payload to the get signals not found response
func (o *GetSignalsNotFound) WithPayload(payload *models.ErrorResponse) *GetSignalsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get signals not found response
func (o *GetSignalsNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSignalsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
