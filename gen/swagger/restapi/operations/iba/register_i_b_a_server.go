// Code generated by go-swagger; DO NOT EDIT.

package iba

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterIBAServerHandlerFunc turns a function with the right signature into a register i b a server handler
type RegisterIBAServerHandlerFunc func(RegisterIBAServerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterIBAServerHandlerFunc) Handle(params RegisterIBAServerParams) middleware.Responder {
	return fn(params)
}

// RegisterIBAServerHandler interface for that can handle valid register i b a server params
type RegisterIBAServerHandler interface {
	Handle(RegisterIBAServerParams) middleware.Responder
}

// NewRegisterIBAServer creates a new http.Handler for the register i b a server operation
func NewRegisterIBAServer(ctx *middleware.Context, handler RegisterIBAServerHandler) *RegisterIBAServer {
	return &RegisterIBAServer{Context: ctx, Handler: handler}
}

/* RegisterIBAServer swagger:route PUT /ibas/servers/ iba registerIBAServer

Register new Server

*/
type RegisterIBAServer struct {
	Context *middleware.Context
	Handler RegisterIBAServerHandler
}

func (o *RegisterIBAServer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterIBAServerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RegisterIBAServerBadRequestBody register i b a server bad request body
//
// swagger:model RegisterIBAServerBadRequestBody
type RegisterIBAServerBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this register i b a server bad request body
func (o *RegisterIBAServerBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register i b a server bad request body based on context it is used
func (o *RegisterIBAServerBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAServerBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAServerBadRequestBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAServerBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAServerBody register i b a server body
//
// swagger:model RegisterIBAServerBody
type RegisterIBAServerBody struct {

	// Комментарий
	// Example: Some notes
	Comment string `json:"comment,omitempty"`

	// IBA сервер ID
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Имя IBA Server
	// Example: iba-server-name.nlmk
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this register i b a server body
func (o *RegisterIBAServerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterIBAServerBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *RegisterIBAServerBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register i b a server body based on context it is used
func (o *RegisterIBAServerBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAServerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAServerBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAServerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAServerConflictBody register i b a server conflict body
//
// swagger:model RegisterIBAServerConflictBody
type RegisterIBAServerConflictBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this register i b a server conflict body
func (o *RegisterIBAServerConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register i b a server conflict body based on context it is used
func (o *RegisterIBAServerConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAServerConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAServerConflictBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAServerConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAServerOKBody register i b a server o k body
//
// swagger:model RegisterIBAServerOKBody
type RegisterIBAServerOKBody struct {

	// Комментарий
	// Example: Some notes
	Comment string `json:"comment,omitempty"`

	// IBA сервер ID
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Имя IBA Server
	// Example: iba-server-name.nlmk
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this register i b a server o k body
func (o *RegisterIBAServerOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterIBAServerOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("registerIBAServerOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *RegisterIBAServerOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("registerIBAServerOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register i b a server o k body based on context it is used
func (o *RegisterIBAServerOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAServerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAServerOKBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAServerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAServerUnauthorizedBody register i b a server unauthorized body
//
// swagger:model RegisterIBAServerUnauthorizedBody
type RegisterIBAServerUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this register i b a server unauthorized body
func (o *RegisterIBAServerUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register i b a server unauthorized body based on context it is used
func (o *RegisterIBAServerUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAServerUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAServerUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAServerUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
