// Code generated by go-swagger; DO NOT EDIT.

package iba

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterIBAGateHandlerFunc turns a function with the right signature into a register i b a gate handler
type RegisterIBAGateHandlerFunc func(RegisterIBAGateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterIBAGateHandlerFunc) Handle(params RegisterIBAGateParams) middleware.Responder {
	return fn(params)
}

// RegisterIBAGateHandler interface for that can handle valid register i b a gate params
type RegisterIBAGateHandler interface {
	Handle(RegisterIBAGateParams) middleware.Responder
}

// NewRegisterIBAGate creates a new http.Handler for the register i b a gate operation
func NewRegisterIBAGate(ctx *middleware.Context, handler RegisterIBAGateHandler) *RegisterIBAGate {
	return &RegisterIBAGate{Context: ctx, Handler: handler}
}

/* RegisterIBAGate swagger:route PUT /ibas/gates iba registerIBAGate

Register new Gate

*/
type RegisterIBAGate struct {
	Context *middleware.Context
	Handler RegisterIBAGateHandler
}

func (o *RegisterIBAGate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterIBAGateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RegisterIBAGateBadRequestBody register i b a gate bad request body
//
// swagger:model RegisterIBAGateBadRequestBody
type RegisterIBAGateBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this register i b a gate bad request body
func (o *RegisterIBAGateBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register i b a gate bad request body based on context it is used
func (o *RegisterIBAGateBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAGateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAGateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAGateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAGateBody register i b a gate body
//
// swagger:model RegisterIBAGateBody
type RegisterIBAGateBody struct {

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this register i b a gate body
func (o *RegisterIBAGateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterIBAGateBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register i b a gate body based on context it is used
func (o *RegisterIBAGateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAGateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAGateBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAGateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAGateConflictBody register i b a gate conflict body
//
// swagger:model RegisterIBAGateConflictBody
type RegisterIBAGateConflictBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this register i b a gate conflict body
func (o *RegisterIBAGateConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register i b a gate conflict body based on context it is used
func (o *RegisterIBAGateConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAGateConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAGateConflictBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAGateConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAGateOKBody register i b a gate o k body
//
// swagger:model RegisterIBAGateOKBody
type RegisterIBAGateOKBody struct {

	// Комментарий
	// Example: Some notes
	Comment string `json:"comment,omitempty"`

	// Имя IBA Gate
	// Example: p3apr3-pda-vc.p3.ia.nlmk
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this register i b a gate o k body
func (o *RegisterIBAGateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterIBAGateOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("registerIBAGateOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register i b a gate o k body based on context it is used
func (o *RegisterIBAGateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAGateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAGateOKBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAGateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAGateUnauthorizedBody register i b a gate unauthorized body
//
// swagger:model RegisterIBAGateUnauthorizedBody
type RegisterIBAGateUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this register i b a gate unauthorized body
func (o *RegisterIBAGateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register i b a gate unauthorized body based on context it is used
func (o *RegisterIBAGateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAGateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAGateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAGateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
