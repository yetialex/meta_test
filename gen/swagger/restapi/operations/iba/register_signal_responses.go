// Code generated by go-swagger; DO NOT EDIT.

package iba

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// RegisterSignalOKCode is the HTTP code returned for type RegisterSignalOK
const RegisterSignalOKCode int = 200

/*RegisterSignalOK OK

swagger:response registerSignalOK
*/
type RegisterSignalOK struct {

	/*
	  In: Body
	*/
	Payload *RegisterSignalOKBody `json:"body,omitempty"`
}

// NewRegisterSignalOK creates RegisterSignalOK with default headers values
func NewRegisterSignalOK() *RegisterSignalOK {

	return &RegisterSignalOK{}
}

// WithPayload adds the payload to the register signal o k response
func (o *RegisterSignalOK) WithPayload(payload *RegisterSignalOKBody) *RegisterSignalOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register signal o k response
func (o *RegisterSignalOK) SetPayload(payload *RegisterSignalOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterSignalOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterSignalBadRequestCode is the HTTP code returned for type RegisterSignalBadRequest
const RegisterSignalBadRequestCode int = 400

/*RegisterSignalBadRequest Bad params supplied

swagger:response registerSignalBadRequest
*/
type RegisterSignalBadRequest struct {

	/*
	  In: Body
	*/
	Payload *RegisterSignalBadRequestBody `json:"body,omitempty"`
}

// NewRegisterSignalBadRequest creates RegisterSignalBadRequest with default headers values
func NewRegisterSignalBadRequest() *RegisterSignalBadRequest {

	return &RegisterSignalBadRequest{}
}

// WithPayload adds the payload to the register signal bad request response
func (o *RegisterSignalBadRequest) WithPayload(payload *RegisterSignalBadRequestBody) *RegisterSignalBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register signal bad request response
func (o *RegisterSignalBadRequest) SetPayload(payload *RegisterSignalBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterSignalBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterSignalUnauthorizedCode is the HTTP code returned for type RegisterSignalUnauthorized
const RegisterSignalUnauthorizedCode int = 401

/*RegisterSignalUnauthorized Unauthorized

swagger:response registerSignalUnauthorized
*/
type RegisterSignalUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *RegisterSignalUnauthorizedBody `json:"body,omitempty"`
}

// NewRegisterSignalUnauthorized creates RegisterSignalUnauthorized with default headers values
func NewRegisterSignalUnauthorized() *RegisterSignalUnauthorized {

	return &RegisterSignalUnauthorized{}
}

// WithPayload adds the payload to the register signal unauthorized response
func (o *RegisterSignalUnauthorized) WithPayload(payload *RegisterSignalUnauthorizedBody) *RegisterSignalUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register signal unauthorized response
func (o *RegisterSignalUnauthorized) SetPayload(payload *RegisterSignalUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterSignalUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterSignalNotFoundCode is the HTTP code returned for type RegisterSignalNotFound
const RegisterSignalNotFoundCode int = 404

/*RegisterSignalNotFound Not found

swagger:response registerSignalNotFound
*/
type RegisterSignalNotFound struct {

	/*
	  In: Body
	*/
	Payload *RegisterSignalNotFoundBody `json:"body,omitempty"`
}

// NewRegisterSignalNotFound creates RegisterSignalNotFound with default headers values
func NewRegisterSignalNotFound() *RegisterSignalNotFound {

	return &RegisterSignalNotFound{}
}

// WithPayload adds the payload to the register signal not found response
func (o *RegisterSignalNotFound) WithPayload(payload *RegisterSignalNotFoundBody) *RegisterSignalNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register signal not found response
func (o *RegisterSignalNotFound) SetPayload(payload *RegisterSignalNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterSignalNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterSignalInternalServerErrorCode is the HTTP code returned for type RegisterSignalInternalServerError
const RegisterSignalInternalServerErrorCode int = 500

/*RegisterSignalInternalServerError Internal server error

swagger:response registerSignalInternalServerError
*/
type RegisterSignalInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *RegisterSignalInternalServerErrorBody `json:"body,omitempty"`
}

// NewRegisterSignalInternalServerError creates RegisterSignalInternalServerError with default headers values
func NewRegisterSignalInternalServerError() *RegisterSignalInternalServerError {

	return &RegisterSignalInternalServerError{}
}

// WithPayload adds the payload to the register signal internal server error response
func (o *RegisterSignalInternalServerError) WithPayload(payload *RegisterSignalInternalServerErrorBody) *RegisterSignalInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register signal internal server error response
func (o *RegisterSignalInternalServerError) SetPayload(payload *RegisterSignalInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterSignalInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
