// Code generated by go-swagger; DO NOT EDIT.

package iba

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterIBAGateMntHandlerFunc turns a function with the right signature into a register i b a gate mnt handler
type RegisterIBAGateMntHandlerFunc func(RegisterIBAGateMntParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterIBAGateMntHandlerFunc) Handle(params RegisterIBAGateMntParams) middleware.Responder {
	return fn(params)
}

// RegisterIBAGateMntHandler interface for that can handle valid register i b a gate mnt params
type RegisterIBAGateMntHandler interface {
	Handle(RegisterIBAGateMntParams) middleware.Responder
}

// NewRegisterIBAGateMnt creates a new http.Handler for the register i b a gate mnt operation
func NewRegisterIBAGateMnt(ctx *middleware.Context, handler RegisterIBAGateMntHandler) *RegisterIBAGateMnt {
	return &RegisterIBAGateMnt{Context: ctx, Handler: handler}
}

/* RegisterIBAGateMnt swagger:route PUT /ibas/gates/${gate_name}/mnts iba registerIBAGateMnt

Register new mnt for IBA Gate

*/
type RegisterIBAGateMnt struct {
	Context *middleware.Context
	Handler RegisterIBAGateMntHandler
}

func (o *RegisterIBAGateMnt) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterIBAGateMntParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RegisterIBAGateMntBadRequestBody register i b a gate mnt bad request body
//
// swagger:model RegisterIBAGateMntBadRequestBody
type RegisterIBAGateMntBadRequestBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this register i b a gate mnt bad request body
func (o *RegisterIBAGateMntBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register i b a gate mnt bad request body based on context it is used
func (o *RegisterIBAGateMntBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAGateMntBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAGateMntBadRequestBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAGateMntBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAGateMntBody register i b a gate mnt body
//
// swagger:model RegisterIBAGateMntBody
type RegisterIBAGateMntBody struct {

	// Комментарий
	// Example: Some notes
	Comment string `json:"comment,omitempty"`

	// IBA сервер ID
	// Example: 1
	// Required: true
	IbaServerID *int64 `json:"iba_server_id"`

	// mnt
	// Example: dp-khx
	// Required: true
	Mnt *string `json:"mnt"`
}

// Validate validates this register i b a gate mnt body
func (o *RegisterIBAGateMntBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIbaServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMnt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterIBAGateMntBody) validateIbaServerID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"iba_server_id", "body", o.IbaServerID); err != nil {
		return err
	}

	return nil
}

func (o *RegisterIBAGateMntBody) validateMnt(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"mnt", "body", o.Mnt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register i b a gate mnt body based on context it is used
func (o *RegisterIBAGateMntBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAGateMntBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAGateMntBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAGateMntBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAGateMntOKBody register i b a gate mnt o k body
//
// swagger:model RegisterIBAGateMntOKBody
type RegisterIBAGateMntOKBody struct {

	// Комментарий
	// Example: Some notes
	Comment string `json:"comment,omitempty"`

	// IBA сервер ID
	// Example: 1
	// Required: true
	IbaServerID *int64 `json:"iba_server_id"`

	// mnt
	// Example: dp-khx
	// Required: true
	Mnt *string `json:"mnt"`
}

// Validate validates this register i b a gate mnt o k body
func (o *RegisterIBAGateMntOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIbaServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMnt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterIBAGateMntOKBody) validateIbaServerID(formats strfmt.Registry) error {

	if err := validate.Required("registerIBAGateMntOK"+"."+"iba_server_id", "body", o.IbaServerID); err != nil {
		return err
	}

	return nil
}

func (o *RegisterIBAGateMntOKBody) validateMnt(formats strfmt.Registry) error {

	if err := validate.Required("registerIBAGateMntOK"+"."+"mnt", "body", o.Mnt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register i b a gate mnt o k body based on context it is used
func (o *RegisterIBAGateMntOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAGateMntOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAGateMntOKBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAGateMntOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterIBAGateMntUnauthorizedBody register i b a gate mnt unauthorized body
//
// swagger:model RegisterIBAGateMntUnauthorizedBody
type RegisterIBAGateMntUnauthorizedBody struct {

	// code
	// Example: 300
	Code int64 `json:"code,omitempty"`

	// message
	// Example: Something bad happens.
	Message string `json:"message,omitempty"`
}

// Validate validates this register i b a gate mnt unauthorized body
func (o *RegisterIBAGateMntUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register i b a gate mnt unauthorized body based on context it is used
func (o *RegisterIBAGateMntUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterIBAGateMntUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterIBAGateMntUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res RegisterIBAGateMntUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
