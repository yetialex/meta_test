// Code generated by go-swagger; DO NOT EDIT.

package iba

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// RegisterIBAGateMntOKCode is the HTTP code returned for type RegisterIBAGateMntOK
const RegisterIBAGateMntOKCode int = 200

/*RegisterIBAGateMntOK OK

swagger:response registerIBAGateMntOK
*/
type RegisterIBAGateMntOK struct {

	/*
	  In: Body
	*/
	Payload *RegisterIBAGateMntOKBody `json:"body,omitempty"`
}

// NewRegisterIBAGateMntOK creates RegisterIBAGateMntOK with default headers values
func NewRegisterIBAGateMntOK() *RegisterIBAGateMntOK {

	return &RegisterIBAGateMntOK{}
}

// WithPayload adds the payload to the register i b a gate mnt o k response
func (o *RegisterIBAGateMntOK) WithPayload(payload *RegisterIBAGateMntOKBody) *RegisterIBAGateMntOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register i b a gate mnt o k response
func (o *RegisterIBAGateMntOK) SetPayload(payload *RegisterIBAGateMntOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterIBAGateMntOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterIBAGateMntBadRequestCode is the HTTP code returned for type RegisterIBAGateMntBadRequest
const RegisterIBAGateMntBadRequestCode int = 400

/*RegisterIBAGateMntBadRequest Bad params supplied

swagger:response registerIBAGateMntBadRequest
*/
type RegisterIBAGateMntBadRequest struct {

	/*
	  In: Body
	*/
	Payload *RegisterIBAGateMntBadRequestBody `json:"body,omitempty"`
}

// NewRegisterIBAGateMntBadRequest creates RegisterIBAGateMntBadRequest with default headers values
func NewRegisterIBAGateMntBadRequest() *RegisterIBAGateMntBadRequest {

	return &RegisterIBAGateMntBadRequest{}
}

// WithPayload adds the payload to the register i b a gate mnt bad request response
func (o *RegisterIBAGateMntBadRequest) WithPayload(payload *RegisterIBAGateMntBadRequestBody) *RegisterIBAGateMntBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register i b a gate mnt bad request response
func (o *RegisterIBAGateMntBadRequest) SetPayload(payload *RegisterIBAGateMntBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterIBAGateMntBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterIBAGateMntUnauthorizedCode is the HTTP code returned for type RegisterIBAGateMntUnauthorized
const RegisterIBAGateMntUnauthorizedCode int = 401

/*RegisterIBAGateMntUnauthorized Unauthorized

swagger:response registerIBAGateMntUnauthorized
*/
type RegisterIBAGateMntUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *RegisterIBAGateMntUnauthorizedBody `json:"body,omitempty"`
}

// NewRegisterIBAGateMntUnauthorized creates RegisterIBAGateMntUnauthorized with default headers values
func NewRegisterIBAGateMntUnauthorized() *RegisterIBAGateMntUnauthorized {

	return &RegisterIBAGateMntUnauthorized{}
}

// WithPayload adds the payload to the register i b a gate mnt unauthorized response
func (o *RegisterIBAGateMntUnauthorized) WithPayload(payload *RegisterIBAGateMntUnauthorizedBody) *RegisterIBAGateMntUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register i b a gate mnt unauthorized response
func (o *RegisterIBAGateMntUnauthorized) SetPayload(payload *RegisterIBAGateMntUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterIBAGateMntUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
