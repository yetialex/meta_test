// Code generated by go-swagger; DO NOT EDIT.

package iba

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/yetialex/meta_test/gen/swagger/models"
)

// GetIBAMappingByGateAndMountHandlerFunc turns a function with the right signature into a get i b a mapping by gate and mount handler
type GetIBAMappingByGateAndMountHandlerFunc func(GetIBAMappingByGateAndMountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIBAMappingByGateAndMountHandlerFunc) Handle(params GetIBAMappingByGateAndMountParams) middleware.Responder {
	return fn(params)
}

// GetIBAMappingByGateAndMountHandler interface for that can handle valid get i b a mapping by gate and mount params
type GetIBAMappingByGateAndMountHandler interface {
	Handle(GetIBAMappingByGateAndMountParams) middleware.Responder
}

// NewGetIBAMappingByGateAndMount creates a new http.Handler for the get i b a mapping by gate and mount operation
func NewGetIBAMappingByGateAndMount(ctx *middleware.Context, handler GetIBAMappingByGateAndMountHandler) *GetIBAMappingByGateAndMount {
	return &GetIBAMappingByGateAndMount{Context: ctx, Handler: handler}
}

/* GetIBAMappingByGateAndMount swagger:route GET /ibas/gates/${gate_name}/mnts/${mnt}/signals/mapping iba getIBAMappingByGateAndMount

Return IBA signal mapping by gate and mountpoint

*/
type GetIBAMappingByGateAndMount struct {
	Context *middleware.Context
	Handler GetIBAMappingByGateAndMountHandler
}

func (o *GetIBAMappingByGateAndMount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetIBAMappingByGateAndMountParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetIBAMappingByGateAndMountOKBody get i b a mapping by gate and mount o k body
//
// swagger:model GetIBAMappingByGateAndMountOKBody
type GetIBAMappingByGateAndMountOKBody struct {

	// items
	Items []*models.IBAMappingObject `json:"items"`
}

// Validate validates this get i b a mapping by gate and mount o k body
func (o *GetIBAMappingByGateAndMountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIBAMappingByGateAndMountOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIBAMappingByGateAndMountOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get i b a mapping by gate and mount o k body based on the context it is used
func (o *GetIBAMappingByGateAndMountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIBAMappingByGateAndMountOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIBAMappingByGateAndMountOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIBAMappingByGateAndMountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIBAMappingByGateAndMountOKBody) UnmarshalBinary(b []byte) error {
	var res GetIBAMappingByGateAndMountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
