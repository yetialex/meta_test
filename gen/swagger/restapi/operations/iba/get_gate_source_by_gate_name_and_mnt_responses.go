// Code generated by go-swagger; DO NOT EDIT.

package iba

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yetialex/meta_test/gen/swagger/models"
)

// GetGateSourceByGateNameAndMntOKCode is the HTTP code returned for type GetGateSourceByGateNameAndMntOK
const GetGateSourceByGateNameAndMntOKCode int = 200

/*GetGateSourceByGateNameAndMntOK OK

swagger:response getGateSourceByGateNameAndMntOK
*/
type GetGateSourceByGateNameAndMntOK struct {

	/*
	  In: Body
	*/
	Payload *models.IBAGateSource `json:"body,omitempty"`
}

// NewGetGateSourceByGateNameAndMntOK creates GetGateSourceByGateNameAndMntOK with default headers values
func NewGetGateSourceByGateNameAndMntOK() *GetGateSourceByGateNameAndMntOK {

	return &GetGateSourceByGateNameAndMntOK{}
}

// WithPayload adds the payload to the get gate source by gate name and mnt o k response
func (o *GetGateSourceByGateNameAndMntOK) WithPayload(payload *models.IBAGateSource) *GetGateSourceByGateNameAndMntOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get gate source by gate name and mnt o k response
func (o *GetGateSourceByGateNameAndMntOK) SetPayload(payload *models.IBAGateSource) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGateSourceByGateNameAndMntOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGateSourceByGateNameAndMntBadRequestCode is the HTTP code returned for type GetGateSourceByGateNameAndMntBadRequest
const GetGateSourceByGateNameAndMntBadRequestCode int = 400

/*GetGateSourceByGateNameAndMntBadRequest Bad params supplied

swagger:response getGateSourceByGateNameAndMntBadRequest
*/
type GetGateSourceByGateNameAndMntBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetGateSourceByGateNameAndMntBadRequest creates GetGateSourceByGateNameAndMntBadRequest with default headers values
func NewGetGateSourceByGateNameAndMntBadRequest() *GetGateSourceByGateNameAndMntBadRequest {

	return &GetGateSourceByGateNameAndMntBadRequest{}
}

// WithPayload adds the payload to the get gate source by gate name and mnt bad request response
func (o *GetGateSourceByGateNameAndMntBadRequest) WithPayload(payload *models.ErrorResponse) *GetGateSourceByGateNameAndMntBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get gate source by gate name and mnt bad request response
func (o *GetGateSourceByGateNameAndMntBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGateSourceByGateNameAndMntBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGateSourceByGateNameAndMntUnauthorizedCode is the HTTP code returned for type GetGateSourceByGateNameAndMntUnauthorized
const GetGateSourceByGateNameAndMntUnauthorizedCode int = 401

/*GetGateSourceByGateNameAndMntUnauthorized Unauthorized

swagger:response getGateSourceByGateNameAndMntUnauthorized
*/
type GetGateSourceByGateNameAndMntUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetGateSourceByGateNameAndMntUnauthorized creates GetGateSourceByGateNameAndMntUnauthorized with default headers values
func NewGetGateSourceByGateNameAndMntUnauthorized() *GetGateSourceByGateNameAndMntUnauthorized {

	return &GetGateSourceByGateNameAndMntUnauthorized{}
}

// WithPayload adds the payload to the get gate source by gate name and mnt unauthorized response
func (o *GetGateSourceByGateNameAndMntUnauthorized) WithPayload(payload *models.ErrorResponse) *GetGateSourceByGateNameAndMntUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get gate source by gate name and mnt unauthorized response
func (o *GetGateSourceByGateNameAndMntUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGateSourceByGateNameAndMntUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGateSourceByGateNameAndMntNotFoundCode is the HTTP code returned for type GetGateSourceByGateNameAndMntNotFound
const GetGateSourceByGateNameAndMntNotFoundCode int = 404

/*GetGateSourceByGateNameAndMntNotFound Mnt for Gate not found

swagger:response getGateSourceByGateNameAndMntNotFound
*/
type GetGateSourceByGateNameAndMntNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetGateSourceByGateNameAndMntNotFound creates GetGateSourceByGateNameAndMntNotFound with default headers values
func NewGetGateSourceByGateNameAndMntNotFound() *GetGateSourceByGateNameAndMntNotFound {

	return &GetGateSourceByGateNameAndMntNotFound{}
}

// WithPayload adds the payload to the get gate source by gate name and mnt not found response
func (o *GetGateSourceByGateNameAndMntNotFound) WithPayload(payload *models.ErrorResponse) *GetGateSourceByGateNameAndMntNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get gate source by gate name and mnt not found response
func (o *GetGateSourceByGateNameAndMntNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGateSourceByGateNameAndMntNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
