// Code generated by go-swagger; DO NOT EDIT.

package iba

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/yetialex/meta_test/gen/swagger/models"
)

// GetIBAServersHandlerFunc turns a function with the right signature into a get i b a servers handler
type GetIBAServersHandlerFunc func(GetIBAServersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIBAServersHandlerFunc) Handle(params GetIBAServersParams) middleware.Responder {
	return fn(params)
}

// GetIBAServersHandler interface for that can handle valid get i b a servers params
type GetIBAServersHandler interface {
	Handle(GetIBAServersParams) middleware.Responder
}

// NewGetIBAServers creates a new http.Handler for the get i b a servers operation
func NewGetIBAServers(ctx *middleware.Context, handler GetIBAServersHandler) *GetIBAServers {
	return &GetIBAServers{Context: ctx, Handler: handler}
}

/* GetIBAServers swagger:route GET /ibas/servers/ iba getIBAServers

Get IBA Servers

*/
type GetIBAServers struct {
	Context *middleware.Context
	Handler GetIBAServersHandler
}

func (o *GetIBAServers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetIBAServersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetIBAServersOKBody get i b a servers o k body
//
// swagger:model GetIBAServersOKBody
type GetIBAServersOKBody struct {

	// items
	Items []*models.IBAServer `json:"items"`
}

// Validate validates this get i b a servers o k body
func (o *GetIBAServersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIBAServersOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIBAServersOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get i b a servers o k body based on the context it is used
func (o *GetIBAServersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIBAServersOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIBAServersOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIBAServersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIBAServersOKBody) UnmarshalBinary(b []byte) error {
	var res GetIBAServersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
