// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeWithSubtreeObject node with subtree object
//
// swagger:model nodeWithSubtreeObject
type NodeWithSubtreeObject struct {

	// children
	// Required: true
	Children *NodeWithSubtreeObject `json:"children"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// directory
	// Required: true
	Directory *DirectoryObject `json:"directory"`

	// full name
	// Example: root/sub/leaf/node
	// Required: true
	FullName *string `json:"full_name"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Example: some_rule
	// Required: true
	Name *string `json:"name"`

	// parent id
	// Example: 0
	// Required: true
	ParentID *int64 `json:"parent_id"`

	// signals
	Signals *SignalWithSubtreeObject `json:"signals,omitempty"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this node with subtree object
func (m *NodeWithSubtreeObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeWithSubtreeObject) validateChildren(formats strfmt.Registry) error {

	if err := validate.Required("children", "body", m.Children); err != nil {
		return err
	}

	if m.Children != nil {
		if err := m.Children.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("children")
			}
			return err
		}
	}

	return nil
}

func (m *NodeWithSubtreeObject) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NodeWithSubtreeObject) validateDirectory(formats strfmt.Registry) error {

	if err := validate.Required("directory", "body", m.Directory); err != nil {
		return err
	}

	if m.Directory != nil {
		if err := m.Directory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directory")
			}
			return err
		}
	}

	return nil
}

func (m *NodeWithSubtreeObject) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("full_name", "body", m.FullName); err != nil {
		return err
	}

	return nil
}

func (m *NodeWithSubtreeObject) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NodeWithSubtreeObject) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NodeWithSubtreeObject) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parent_id", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

func (m *NodeWithSubtreeObject) validateSignals(formats strfmt.Registry) error {
	if swag.IsZero(m.Signals) { // not required
		return nil
	}

	if m.Signals != nil {
		if err := m.Signals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signals")
			}
			return err
		}
	}

	return nil
}

func (m *NodeWithSubtreeObject) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this node with subtree object based on the context it is used
func (m *NodeWithSubtreeObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDirectory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeWithSubtreeObject) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	if m.Children != nil {
		if err := m.Children.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("children")
			}
			return err
		}
	}

	return nil
}

func (m *NodeWithSubtreeObject) contextValidateDirectory(ctx context.Context, formats strfmt.Registry) error {

	if m.Directory != nil {
		if err := m.Directory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directory")
			}
			return err
		}
	}

	return nil
}

func (m *NodeWithSubtreeObject) contextValidateSignals(ctx context.Context, formats strfmt.Registry) error {

	if m.Signals != nil {
		if err := m.Signals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeWithSubtreeObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeWithSubtreeObject) UnmarshalBinary(b []byte) error {
	var res NodeWithSubtreeObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
