// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSignal create signal
//
// swagger:model createSignal
type CreateSignal struct {

	// class
	// Example: analog
	// Required: true
	// Enum: [analog discrete virtual]
	Class *string `json:"class"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// external id
	// Example: 1
	ExternalID string `json:"external_id,omitempty"`

	// name
	// Example: some_signal
	// Required: true
	// Pattern: ^[A-Za-z0-9_.]{2,50}$
	Name *string `json:"name"`

	// parent id
	// Example: 1
	ParentID *int64 `json:"parent_id,omitempty"`

	// Measurement unit
	// Example: C
	Unit *string `json:"unit,omitempty"`

	// Value data type
	// Example: real
	// Required: true
	// Enum: [undefined integer real double boolean]
	ValueType *string `json:"value_type"`
}

// Validate validates this create signal
func (m *CreateSignal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createSignalTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["analog","discrete","virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createSignalTypeClassPropEnum = append(createSignalTypeClassPropEnum, v)
	}
}

const (

	// CreateSignalClassAnalog captures enum value "analog"
	CreateSignalClassAnalog string = "analog"

	// CreateSignalClassDiscrete captures enum value "discrete"
	CreateSignalClassDiscrete string = "discrete"

	// CreateSignalClassVirtual captures enum value "virtual"
	CreateSignalClassVirtual string = "virtual"
)

// prop value enum
func (m *CreateSignal) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createSignalTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateSignal) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	// value enum
	if err := m.validateClassEnum("class", "body", *m.Class); err != nil {
		return err
	}

	return nil
}

func (m *CreateSignal) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", m.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateSignal) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[A-Za-z0-9_.]{2,50}$`); err != nil {
		return err
	}

	return nil
}

var createSignalTypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["undefined","integer","real","double","boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createSignalTypeValueTypePropEnum = append(createSignalTypeValueTypePropEnum, v)
	}
}

const (

	// CreateSignalValueTypeUndefined captures enum value "undefined"
	CreateSignalValueTypeUndefined string = "undefined"

	// CreateSignalValueTypeInteger captures enum value "integer"
	CreateSignalValueTypeInteger string = "integer"

	// CreateSignalValueTypeReal captures enum value "real"
	CreateSignalValueTypeReal string = "real"

	// CreateSignalValueTypeDouble captures enum value "double"
	CreateSignalValueTypeDouble string = "double"

	// CreateSignalValueTypeBoolean captures enum value "boolean"
	CreateSignalValueTypeBoolean string = "boolean"
)

// prop value enum
func (m *CreateSignal) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createSignalTypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateSignal) validateValueType(formats strfmt.Registry) error {

	if err := validate.Required("value_type", "body", m.ValueType); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueTypeEnum("value_type", "body", *m.ValueType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create signal based on context it is used
func (m *CreateSignal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSignal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSignal) UnmarshalBinary(b []byte) error {
	var res CreateSignal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
