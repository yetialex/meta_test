// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateSignal update signal
//
// swagger:model updateSignal
type UpdateSignal struct {

	// acl
	ACL interface{} `json:"acl,omitempty"`

	// class
	// Example: analog
	// Enum: [analog discrete virtual]
	Class *string `json:"class,omitempty"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description *string `json:"description,omitempty"`

	// external id
	// Example: 1
	ExternalID *string `json:"external_id,omitempty"`

	// name
	// Example: node1
	// Pattern: ^[A-Za-z0-9_.]{2,50}$
	Name *string `json:"name,omitempty"`

	// parent id
	// Example: 1
	ParentID *int64 `json:"parent_id,omitempty"`

	// Measurement unit
	// Example: C
	Unit *string `json:"unit,omitempty"`

	// Value data type
	// Example: real
	// Enum: [undefined integer real double boolean]
	ValueType *string `json:"value_type,omitempty"`
}

// Validate validates this update signal
func (m *UpdateSignal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateSignalTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["analog","discrete","virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateSignalTypeClassPropEnum = append(updateSignalTypeClassPropEnum, v)
	}
}

const (

	// UpdateSignalClassAnalog captures enum value "analog"
	UpdateSignalClassAnalog string = "analog"

	// UpdateSignalClassDiscrete captures enum value "discrete"
	UpdateSignalClassDiscrete string = "discrete"

	// UpdateSignalClassVirtual captures enum value "virtual"
	UpdateSignalClassVirtual string = "virtual"
)

// prop value enum
func (m *UpdateSignal) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateSignalTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateSignal) validateClass(formats strfmt.Registry) error {
	if swag.IsZero(m.Class) { // not required
		return nil
	}

	// value enum
	if err := m.validateClassEnum("class", "body", *m.Class); err != nil {
		return err
	}

	return nil
}

func (m *UpdateSignal) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", *m.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateSignal) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[A-Za-z0-9_.]{2,50}$`); err != nil {
		return err
	}

	return nil
}

var updateSignalTypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["undefined","integer","real","double","boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateSignalTypeValueTypePropEnum = append(updateSignalTypeValueTypePropEnum, v)
	}
}

const (

	// UpdateSignalValueTypeUndefined captures enum value "undefined"
	UpdateSignalValueTypeUndefined string = "undefined"

	// UpdateSignalValueTypeInteger captures enum value "integer"
	UpdateSignalValueTypeInteger string = "integer"

	// UpdateSignalValueTypeReal captures enum value "real"
	UpdateSignalValueTypeReal string = "real"

	// UpdateSignalValueTypeDouble captures enum value "double"
	UpdateSignalValueTypeDouble string = "double"

	// UpdateSignalValueTypeBoolean captures enum value "boolean"
	UpdateSignalValueTypeBoolean string = "boolean"
)

// prop value enum
func (m *UpdateSignal) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateSignalTypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateSignal) validateValueType(formats strfmt.Registry) error {
	if swag.IsZero(m.ValueType) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueTypeEnum("value_type", "body", *m.ValueType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update signal based on context it is used
func (m *UpdateSignal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSignal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSignal) UnmarshalBinary(b []byte) error {
	var res UpdateSignal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
