// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignalWithSubtreeObject signal with subtree object
//
// swagger:model signalWithSubtreeObject
type SignalWithSubtreeObject struct {

	// children
	// Required: true
	Children *SignalWithSubtreeObject `json:"children"`

	// class
	// Example: analog
	// Required: true
	// Enum: [analog discrete virtual]
	Class *string `json:"class"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// external id
	// Example: 1
	ExternalID *string `json:"external_id,omitempty"`

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Measurement unit
	// Example: C
	Unit *string `json:"unit,omitempty"`

	// ISO 8601 format
	// Example: 2018-03-20T09:12:28.123Z
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// Value data type
	// Example: real
	// Required: true
	// Enum: [undefined integer real double boolean]
	ValueType *string `json:"value_type"`
}

// Validate validates this signal with subtree object
func (m *SignalWithSubtreeObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignalWithSubtreeObject) validateChildren(formats strfmt.Registry) error {

	if err := validate.Required("children", "body", m.Children); err != nil {
		return err
	}

	if m.Children != nil {
		if err := m.Children.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("children")
			}
			return err
		}
	}

	return nil
}

var signalWithSubtreeObjectTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["analog","discrete","virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signalWithSubtreeObjectTypeClassPropEnum = append(signalWithSubtreeObjectTypeClassPropEnum, v)
	}
}

const (

	// SignalWithSubtreeObjectClassAnalog captures enum value "analog"
	SignalWithSubtreeObjectClassAnalog string = "analog"

	// SignalWithSubtreeObjectClassDiscrete captures enum value "discrete"
	SignalWithSubtreeObjectClassDiscrete string = "discrete"

	// SignalWithSubtreeObjectClassVirtual captures enum value "virtual"
	SignalWithSubtreeObjectClassVirtual string = "virtual"
)

// prop value enum
func (m *SignalWithSubtreeObject) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, signalWithSubtreeObjectTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SignalWithSubtreeObject) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	// value enum
	if err := m.validateClassEnum("class", "body", *m.Class); err != nil {
		return err
	}

	return nil
}

func (m *SignalWithSubtreeObject) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SignalWithSubtreeObject) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SignalWithSubtreeObject) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var signalWithSubtreeObjectTypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["undefined","integer","real","double","boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signalWithSubtreeObjectTypeValueTypePropEnum = append(signalWithSubtreeObjectTypeValueTypePropEnum, v)
	}
}

const (

	// SignalWithSubtreeObjectValueTypeUndefined captures enum value "undefined"
	SignalWithSubtreeObjectValueTypeUndefined string = "undefined"

	// SignalWithSubtreeObjectValueTypeInteger captures enum value "integer"
	SignalWithSubtreeObjectValueTypeInteger string = "integer"

	// SignalWithSubtreeObjectValueTypeReal captures enum value "real"
	SignalWithSubtreeObjectValueTypeReal string = "real"

	// SignalWithSubtreeObjectValueTypeDouble captures enum value "double"
	SignalWithSubtreeObjectValueTypeDouble string = "double"

	// SignalWithSubtreeObjectValueTypeBoolean captures enum value "boolean"
	SignalWithSubtreeObjectValueTypeBoolean string = "boolean"
)

// prop value enum
func (m *SignalWithSubtreeObject) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, signalWithSubtreeObjectTypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SignalWithSubtreeObject) validateValueType(formats strfmt.Registry) error {

	if err := validate.Required("value_type", "body", m.ValueType); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueTypeEnum("value_type", "body", *m.ValueType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this signal with subtree object based on the context it is used
func (m *SignalWithSubtreeObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignalWithSubtreeObject) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	if m.Children != nil {
		if err := m.Children.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("children")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SignalWithSubtreeObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignalWithSubtreeObject) UnmarshalBinary(b []byte) error {
	var res SignalWithSubtreeObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
