// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNode create node
//
// swagger:model createNode
type CreateNode struct {

	// acl
	ACL interface{} `json:"acl,omitempty"`

	// comment
	// Example: Comment
	// Pattern: ^.{2,200}$
	Comment string `json:"comment,omitempty"`

	// description
	// Example: Description
	// Pattern: ^.{2,200}$
	Description string `json:"description,omitempty"`

	// directory id
	// Example: 1
	DirectoryID int64 `json:"directory_id,omitempty"`

	// meta
	// Example: meta
	// Pattern: ^.{2,200}$
	Meta string `json:"meta,omitempty"`

	// name
	// Example: node1
	// Required: true
	// Pattern: ^[A-Za-z0-9_.]{2,50}$
	Name *string `json:"name"`

	// parent id
	// Example: 1
	// Required: true
	ParentID *int64 `json:"parent_id"`

	// signal id
	// Example: 1
	SignalID int64 `json:"signal_id,omitempty"`
}

// Validate validates this create node
func (m *CreateNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateNode) validateComment(formats strfmt.Registry) error {
	if swag.IsZero(m.Comment) { // not required
		return nil
	}

	if err := validate.Pattern("comment", "body", m.Comment, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateNode) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", m.Description, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateNode) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if err := validate.Pattern("meta", "body", m.Meta, `^.{2,200}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateNode) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[A-Za-z0-9_.]{2,50}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateNode) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parent_id", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create node based on context it is used
func (m *CreateNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateNode) UnmarshalBinary(b []byte) error {
	var res CreateNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
